<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="580" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Copilot" />
      <item value="indices" />
      <item value="  &#10;    Set the limit of rows for this scan. We will terminate the scan if the number of returned rows&#10;    reaches this value.&#10;    &lt;p&gt;&#10;    This condition will be tested at last, after all other conditions such as stopRow, filter, etc.&#10;    @param limit the limit of rows for this scan" />
      <item value="Aviator Evaluator" />
      <item value="Mutator Callback" />
      <item value="add Fuzzy Row Filter" />
      <item value="BALANCE" />
      <item value="BALANCE ERROR" />
      <item value="Assert" />
      <item value="PDM EMPTY COLUMN TYPE ERROR" />
      <item value="exist" />
      <item value="EXSIT" />
      <item value="sync" />
      <item value="create Multiset Table String" />
      <item value="transientable" />
      <item value="is Reserved Word" />
      <item value="check Not Empty Reserved Words" />
      <item value="get Indices" />
      <item value="LONGTEXT" />
      <item value="precision" />
      <item value="CLICKHOUSE" />
      <item value="truncate Table Async" />
      <item value="    Creates a new table with the specified number of regions.  The start key specified will become&#10;    the end key of the first region of the table, and the end key specified will become the start&#10;    key of the last region of the table (the first region has a null start key and the last region&#10;    has a null end key). BigInteger math will be used to divide the key range specified into enough&#10;    segments to make the required number of total regions. Synchronous operation.&#10;   &#10;    @param desc table descriptor for table&#10;    @param startKey beginning of key range&#10;    @param endKey end of key range&#10;    @param numRegions the total number of regions to create&#10;    @throws IllegalArgumentException if the table name is reserved&#10;    @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running&#10;    @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent&#10;    threads, the table may have been created between " />
      <item value="    Return the list of attached co-processor represented&#10;   &#10;    @return The list of CoprocessorDescriptor" />
      <item value=" TableDescriptor contains the details about an HBase table such as the descriptors of&#10;  all the column families, is the table a catalog table, &lt;code&gt; hbase:meta &lt;code&gt;,&#10;  if the table is read only, the maximum size of the memstore,&#10;  when the region split should occur, coprocessors associated with it etc..." />
      <item value="PREFETCH BLOCKS ON OPEN" />
      <item value="COMPRESSION" />
      <item value="KEEP DELETED CELLS" />
      <item value="NEW VERSION BEHAVIOR" />
      <item value="EVICT BLOCKS ON CLOSE" />
      <item value="      A map which holds the configuration specific to the column family. The&#10;      keys of the map have the same names as config keys and override the&#10;      defaults with cf-specific settings. Example usage may be for compactions,&#10;      etc." />
      <item value="    Pattern that matches a coprocessor specification. Form is:&#10;    {@code &lt;coprocessor jar file location&gt; '|' &lt;class name&gt; ['|' &lt;priority&gt; ['|' &lt;arguments&gt;]]}&#10;    where arguments are {@code &lt;KEY&gt; '=' &lt;VALUE&gt; [,...]}&#10;    For example: {@code hdfs:foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2}" />
      <item value="   Used by HBase Shell interface to access this metadata&#10;    attribute which denotes the maximum size of the store file after which a&#10;    region split occurs." />
      <item value="  Annotation to inform users of a package, class or method's intended audience.&#10;  Currently the audience can be {@link Public}, {@link LimitedPrivate} or&#10;  {@link Private}. &lt;br&gt;&#10;  All public classes must have InterfaceAudience annotation. &lt;br&gt;&#10;  &lt;ul&gt;&#10;  &lt;li&gt;Public classes that are not marked with this annotation must be&#10;  considered by default as {@link Private}.&lt;li&gt;&#10; &#10;  &lt;li&gt;External applications must only use classes that are marked&#10;  {@link Public}. Avoid using non public classes as these classes&#10;  could be removed or change in incompatible ways.&lt;li&gt;&#10; &#10;  &lt;li&gt;Some projects may choose to give special consideration to related&#10;  projects. Such consideration can be done by using the {@link LimitedPrivate}&#10;  annotation with a named set of projects.&lt;li&gt;&#10; &#10;  &lt;li&gt; Methods may have a different annotation that it is more restrictive&#10;  compared to the audience classification of the class. Example: A class&#10;  might be {@link Public}, but a method may be {@link LimitedPrivate}&#10;  &lt;li&gt;&lt;ul&gt;" />
      <item value="      Causes the current thread to wait, if necessary, until the&#10;      process represented by this {@code Process} object has&#10;      terminated, or the specified waiting time elapses.&#10;     &#10;      &lt;p&gt;If the process has already terminated then this method returns&#10;      immediately with the value {@code true}.  If the process has not&#10;      terminated and the timeout value is less than, or equal to, zero, then&#10;      this method returns immediately with the value {@code false}.&#10;     &#10;      &lt;p&gt;The default implementation of this methods polls the {@code exitValue}&#10;      to check if the process has terminated. Concrete implementations of this&#10;      class are strongly encouraged to override this method with a more&#10;      efficient implementation.&#10;     &#10;      @param timeout the maximum time to wait&#10;      @param unit the time unit of the {@code timeout} argument" />
      <item value="needs Escaping" />
      <item value="count Leading Backslash" />
      <item value="      Constructs a process builder with the specified operating&#10;      system program and arguments.  This constructor does &lt;i&gt;not&lt;i&gt;&#10;      make a copy of the {@code command} list.  Subsequent&#10;      updates to the list will be reflected in the state of the&#10;      process builder.  It is not checked whether&#10;      {@code command} corresponds to a valid operating system&#10;      command." />
      <item value="      Add a listener to the configuration, after the server modified the configuration, the client will use the&#10;      incoming listener callback. Recommended asynchronous processing, the application can implement the getExecutor&#10;      method in the ManagerListener, provide a thread pool of execution. If provided, use the main thread callback, May&#10;      block other configurations or be blocked by other configurations." />
      <item value="  Represents a predicate (boolean-valued function) of one argument.&#10; &#10;  &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;a&gt;&#10;  whose functional method is {@link test(Object)}.&#10; &#10;  @param &lt;T&gt; the type of the input to the predicate" />
      <item value="      Evaluates this predicate on the given argument.&#10;     &#10;      @param t the input argument&#10;      @return {@code true} if the input argument matches the predicate,&#10;      otherwise {@code false}" />
      <item value="Predicate" />
      <item value="compute If Absent" />
      <item value="fkey Constraints" />
      <item value="unique Consts" />
      <item value="Reverse" />
      <item value="    Returns the {@code int} value that is equal to {@code value}, if possible.&#10;   &#10;    @param value any value in the range of the {@code int} type&#10;    @return the {@code int} value that equals {@code value}&#10;    @throws IllegalArgumentException if {@code value} is greater than {@link IntegerMAX_VALUE} or&#10;        less than {@link IntegerMIN_VALUE}" />
      <item value="  Static utility methods pertaining to {@code int} primitives, that are not already found in either&#10;  {@link Integer} or {@link Arrays}.&#10; &#10;  &lt;p&gt;See the Guava User Guide article on &lt;a&#10;  href=&quot;https:github.comgoogleguavawikiPrimitivesExplained&quot;&gt;primitive utilities&lt;a&gt;." />
      <item value="      Convert a string to the Java literal and enclose it with double quotes.&#10;      Null will result in &quot;null&quot; (without double quotes)." />
      <item value="&#9;  Check if is a dialect reserved word of ANSI-SQL reserved word&#10;&#9;  &#10;&#9;  @return false:not reserved word. true:reserved by dialect or ANSI-SQL" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1683609221094" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1689584224351" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="340" />
    <histories>
      <item value="delete Processing Time Timer" />
      <item value="transient" />
      <item value="Transaction" />
      <item value="Sources may assign timestamps to elements and may manually emit watermarks via the methods SourceFunction.SourceContext.collectWithTimestamp(Object, long) and SourceFunction.SourceContext.emitWatermark(Watermark)." />
      <item value="The StreamExecutionEnvironment is the context in which a streaming program is executed. A LocalStreamEnvironment will cause execution in the current JVM, a RemoteStreamEnvironment will cause execution on a remote setup. The environment provides methods to control the job execution (such as setting the parallelism or the fault tolerancecheckpointing parameters) and to interact with the outside world (data access)." />
      <item value="walkthrough" />
      <item value="Keyed Process Function" />
      <item value="Skeleton" />
      <item value="amend" />
      <item value="deal" />
      <item value="excution Id" />
      <item value="Execute the annotated method with a fixed period between invocations. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the period" />
      <item value="Execute the annotated method with a fixed period between the end of the last invocation and the start of the next. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the delay" />
      <item value="Number of units of time to delay before the first execution of a fixedRate or fixedDelay task. The time unit is milliseconds by default but can be overridden via timeUnit." />
      <item value="Execute the annotated method with a fixed period between the end of the last invocation and the start of the next. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the delay as a String value — for example, a placeholder or a java.time.Duration compliant value" />
      <item value="Calculate the next Temporal that matches this expression. Params: temporal – the seed value Returns: the next temporal that matches this expression, or null if no such temporal can be found" />
      <item value="period" />
      <item value="hour before event time" />
      <item value="compute If Absent" />
      <item value="Immutable Collections" />
      <item value="associated Columns" />
      <item value="association" />
      <item value="aggregate" />
      <item value="Bean Supplier" />
      <item value="The annotated element must not be null nor empty. Supported types are: CharSequence (length of character sequence is evaluated) Collection (collection size is evaluated) Map (map size is evaluated) Array (array length is evaluated) Since: 2.0 Author: Emmanuel Bernard, Hardy Ferentschik" />
      <item value="related Device Name" />
      <item value="process Node Test Address" />
      <item value="handle Node Test Address" />
      <item value="compute" />
      <item value="refresh" />
      <item value="flush" />
      <item value="flush Buffer" />
      <item value="Abstract Data Writer" />
      <item value="intercepter" />
      <item value="Override" />
      <item value="@Order defines the sort order for an annotated component. The value is optional and represents an order value as defined in the Ordered interface. Lower values have higher priority. The default value is Ordered.LOWEST_PRECEDENCE, indicating lowest priority (losing to any other specified order value). NOTE: Since Spring 4.0, annotation-based ordering is supported for many kinds of components in Spring, even for collection injection where the order values of the target components are taken into account (either from their target class or from their @Bean method). While such order values may influence priorities at injection points, please be aware that they do not influence singleton startup order which is an orthogonal concern determined by dependency relationships and @DependsOn declarations (influencing a runtime-determined dependency graph). Since Spring 4.1, the standard javax.annotation.Priority annotation can be used as a drop-in replacement for this annotation in ordering scenarios. Note that @Priority may have additional semantics when a single element has to be picked (see AnnotationAwareOrderComparator.getPriority). Alternatively, order values may also be determined on a per-instance basis through the Ordered interface, allowing for configuration-determined instance values instead of hard-coded values attached to a particular class. Consult the javadoc for OrderComparator for details on the sort semantics for non-ordered objects." />
      <item value="} In the sample above the condition will match if no bean of type MyService is already contained in the BeanFactory. The condition can only match the bean definitions that have been processed by the application context so far and, as such, it is strongly recommended to use this condition on auto-configuration classes only. If a candidate bean may be created by another auto-configuration, make sure that the one using this condition runs after." />
      <item value="@Conditional that only matches when no beans meeting the specified requirements are already contained in the BeanFactory. None of the requirements must be met for the condition to match and the requirements do not have to be met by the same bean. When placed on a @Bean method, the bean class defaults to the return type of the factory method:" />
      <item value="formatter" />
      <item value="formattor" />
      <item value="format" />
      <item value="formator" />
      <item value="formator [O'R]" />
      <item value="for [F'O'R]" />
      <item value="Formator" />
      <item value="Formator Intercepter" />
      <item value="abbreviate" />
      <item value="Erorr" />
      <item value="Output Capture Extension" />
      <item value="violations" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="97" />
        <entry key="ENGLISH" value="98" />
        <entry key="FRENCH" value="4" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SESOTHO" value="1" />
      </map>
    </option>
  </component>
</application>