<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="2703" />
    <option name="newTranslationDialogY" value="454" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Usage" />
      <item value="Useage" />
      <item value="usages" />
      <item value="Immutable List" />
      <item value="registration" />
      <item value="GLUE" />
      <item value="Discard" />
      <item value="hessian" />
      <item value="Circular" />
      <item value="Spring Glue Factory" />
      <item value="enumeration" />
      <item value="  An object that implements the Enumeration interface generates a&#10;  series of elements, one at a time. Successive calls to the&#10;  {@code nextElement} method return successive elements of the&#10;  series.&#10;  &lt;p&gt;&#10;  For example, to print all elements of a {@code Vector&lt;E&gt;} &lt;i&gt;v&lt;i&gt;:&#10;  &lt;pre&gt;&#10;    for (Enumeration&amp;lt;E&amp;gt; e = v.elements(); e.hasMoreElements();)&#10;        System.out.println(e.nextElement());&lt;pre&gt;&#10;  &lt;p&gt;&#10;  Methods are provided to enumerate through the elements of a&#10;  vector, the keys of a hashtable, and the values in a hashtable.&#10;  Enumerations are also used to specify the input streams to a&#10;  {@code SequenceInputStream}.&#10; &#10;  @apiNote&#10;  The functionality of this interface is duplicated by the {@link Iterator}&#10;  interface.  In addition, {@code Iterator} adds an optional remove operation,&#10;  and has shorter method names.  New implementations should consider using&#10;  {@code Iterator} in preference to {@code Enumeration}. It is possible to&#10;  adapt an {@code Enumeration} to an {@code Iterator} by using the" />
      <item value="      Returns a canonical representation for the string object.&#10;      &lt;p&gt;&#10;      A pool of strings, initially empty, is maintained privately by the&#10;      class {@code String}.&#10;      &lt;p&gt;&#10;      When the intern method is invoked, if the pool already contains a&#10;      string equal to this {@code String} object as determined by&#10;      the {@link equals(Object)} method, then the string from the pool is&#10;      returned. Otherwise, this {@code String} object is added to the&#10;      pool and a reference to this {@code String} object is returned.&#10;      &lt;p&gt;&#10;      It follows that for any two strings {@code s} and {@code t},&#10;      {@code s.intern() == t.intern()} is {@code true}&#10;      if and only if {@code s.equals(t)} is {@code true}.&#10;      &lt;p&gt;&#10;      All literal strings and string-valued constant expressions are&#10;      interned. String literals are defined in section 3.10.5 of the&#10;      &lt;cite&gt;The Java&amp;trade; Language Specification&lt;cite&gt;.&#10;     &#10;      @return  a string that has the same contents as this string, but is&#10;               guaranteed to be from a pool of unique strings.&#10;      @jls 3.10.5 String Literals" />
      <item value="      The data provider that support DataSource side Aggregation must implement this method." />
      <item value="      The {@code flatMap()} operation has the effect of applying a one-to-many&#10;      transformation to the elements of the stream, and then flattening the&#10;      resulting elements into a new stream.&#10;     &#10;      &lt;p&gt;&lt;b&gt;Examples.&lt;b&gt;&#10;     &#10;      &lt;p&gt;If {@code orders} is a stream of purchase orders, and each purchase&#10;      order contains a collection of line items, then the following produces a&#10;      stream containing all the line items in all the orders:&#10;      &lt;pre&gt;{@code&#10;          orders.flatMap(order -&gt; order.getLineItems().stream())...&#10;      }&lt;pre&gt;" />
      <item value="      Returns a stream consisting of the results of replacing each element of&#10;      this stream with the contents of a mapped stream produced by applying&#10;      the provided mapping function to each element.  Each mapped stream is&#10;      {@link java.util.stream.BaseStreamclose() closed} after its contents&#10;      have been placed into this stream.  (If a mapped stream is {@code null}&#10;      an empty stream is used, instead.)" />
      <item value="flat Map" />
      <item value="Composite Config" />
      <item value="Dimension Config" />
      <item value="is Assignable From" />
      <item value="predicate" />
      <item value="Agg Config" />
      <item value="Comparator" />
      <item value="Aggregate Collector" />
      <item value="  A &lt;a href=&quot;package-summary.htmlReduction&quot;&gt;mutable reduction operation&lt;a&gt; that&#10;  accumulates input elements into a mutable result container, optionally transforming&#10;  the accumulated result into a final representation after all input elements&#10;  have been processed.  Reduction operations can be performed either sequentially&#10;  or in parallel.&#10; " />
      <item value="phantomjs" />
      <item value="Persist Service" />
      <item value="Velocity Engine" />
      <item value="&#9;  Returns the constraint metadata reported to fail.&#10;&#9;  The returned instance is immutable." />
      <item value="executable Return Value" />
      <item value="executable Parameters" />
      <item value="interpolated Message" />
      <item value="expression Variables" />
      <item value="Constraint Violation" />
      <item value="&#9;  @param type The type of payload to retrieve&#10;&#9;  @return an instance of the specified type set by the user via&#10;&#9;  {@link HibernateConstraintValidatorContextwithDynamicPayload(Object)} or {@code null} if no constraint payload&#10;&#9;  if the given type has been set." />
      <item value="  Describes a constraint violation. This object exposes the constraint&#10;  violation context as well as the message describing the violation." />
      <item value="transient" />
      <item value="canonical Field Name" />
      <item value="  Enumeration for basic token types used for returning results&#10;  of parsing JSON content." />
      <item value="  {@link HttpInputMessage} that can eventually stores a Jackson view that will be used&#10;  to deserialize the message." />
      <item value="  Marker annotation that indicates that the annotated method&#10;  or field should be serialized by including literal String value&#10;  of the property as is, without quoting of characters.&#10;  This can be useful for injecting values already serialized in JSON or &#10;  passing javascript function definitions from server to a javascript client.&#10; &lt;p&gt;&#10;  Warning: the resulting JSON stream may be invalid depending on your input value." />
      <item value="  A custom {@link ConstraintViolation} which allows to get additional information for a constraint violation.&#10; " />
      <item value="     The '(' numeric flag may be used to format negative numbers with&#10;     parentheses rather than a minus sign.  Group separators are&#10;     automatically inserted." />
      <item value="  &lt;p&gt; Formatted printing for the Java language is heavily inspired by C's&#10;  {@code printf}.  Although the format strings are similar to C, some&#10;  customizations have been made to accommodate the Java language and exploit&#10;  some of its features.  Also, Java formatting is more strict than C's; for&#10;  example, if a conversion is incompatible with a flag, an exception will be&#10;  thrown.  In C inapplicable flags are silently ignored.  The format strings&#10;  are thus intended to be recognizable to C programmers but not necessarily&#10;  completely compatible with those in C." />
      <item value=" &lt;p&gt; Formatters are not necessarily safe for multithreaded access.  Thread&#10;  safety is optional and is the responsibility of users of methods in this&#10;  class." />
      <item value="  An interpreter for printf-style format strings.  This class provides support&#10;  for layout justification and alignment, common formats for numeric, string,&#10;  and datetime data, and locale-specific output.  Common Java types such as&#10;  {@code byte}, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}&#10;  are supported.  Limited formatting customization for arbitrary user types is&#10;  provided through the {@link Formattable} interface.&#10; &#10;  &lt;p&gt; Formatters are not necessarily safe for multithreaded access.  Thread&#10;  safety is optional and is the responsibility of users of methods in this&#10;  class." />
      <item value="&#9;&#10;&#9;  Interpolates given term based on the constraint validation context.&#10;&#9; &#10;&#9;  @param term the message to interpolate&#10;&#9;  @param context contextual information related to the interpolation&#10;&#9; &#10;&#9;  @return interpolated message" />
      <item value="interpolate" />
      <item value="Resolves" />
      <item value="contributor" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669861719894" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>