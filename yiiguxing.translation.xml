<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="580" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Copilot" />
      <item value="indices" />
      <item value="  &#10;    Set the limit of rows for this scan. We will terminate the scan if the number of returned rows&#10;    reaches this value.&#10;    &lt;p&gt;&#10;    This condition will be tested at last, after all other conditions such as stopRow, filter, etc.&#10;    @param limit the limit of rows for this scan" />
      <item value="Aviator Evaluator" />
      <item value="Mutator Callback" />
      <item value="add Fuzzy Row Filter" />
      <item value="BALANCE" />
      <item value="BALANCE ERROR" />
      <item value="Assert" />
      <item value="PDM EMPTY COLUMN TYPE ERROR" />
      <item value="exist" />
      <item value="EXSIT" />
      <item value="sync" />
      <item value="create Multiset Table String" />
      <item value="transientable" />
      <item value="is Reserved Word" />
      <item value="check Not Empty Reserved Words" />
      <item value="get Indices" />
      <item value="LONGTEXT" />
      <item value="precision" />
      <item value="CLICKHOUSE" />
      <item value="truncate Table Async" />
      <item value="    Creates a new table with the specified number of regions.  The start key specified will become&#10;    the end key of the first region of the table, and the end key specified will become the start&#10;    key of the last region of the table (the first region has a null start key and the last region&#10;    has a null end key). BigInteger math will be used to divide the key range specified into enough&#10;    segments to make the required number of total regions. Synchronous operation.&#10;   &#10;    @param desc table descriptor for table&#10;    @param startKey beginning of key range&#10;    @param endKey end of key range&#10;    @param numRegions the total number of regions to create&#10;    @throws IllegalArgumentException if the table name is reserved&#10;    @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running&#10;    @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent&#10;    threads, the table may have been created between " />
      <item value="    Return the list of attached co-processor represented&#10;   &#10;    @return The list of CoprocessorDescriptor" />
      <item value=" TableDescriptor contains the details about an HBase table such as the descriptors of&#10;  all the column families, is the table a catalog table, &lt;code&gt; hbase:meta &lt;code&gt;,&#10;  if the table is read only, the maximum size of the memstore,&#10;  when the region split should occur, coprocessors associated with it etc..." />
      <item value="PREFETCH BLOCKS ON OPEN" />
      <item value="COMPRESSION" />
      <item value="KEEP DELETED CELLS" />
      <item value="NEW VERSION BEHAVIOR" />
      <item value="EVICT BLOCKS ON CLOSE" />
      <item value="      A map which holds the configuration specific to the column family. The&#10;      keys of the map have the same names as config keys and override the&#10;      defaults with cf-specific settings. Example usage may be for compactions,&#10;      etc." />
      <item value="    Pattern that matches a coprocessor specification. Form is:&#10;    {@code &lt;coprocessor jar file location&gt; '|' &lt;class name&gt; ['|' &lt;priority&gt; ['|' &lt;arguments&gt;]]}&#10;    where arguments are {@code &lt;KEY&gt; '=' &lt;VALUE&gt; [,...]}&#10;    For example: {@code hdfs:foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2}" />
      <item value="   Used by HBase Shell interface to access this metadata&#10;    attribute which denotes the maximum size of the store file after which a&#10;    region split occurs." />
      <item value="  Annotation to inform users of a package, class or method's intended audience.&#10;  Currently the audience can be {@link Public}, {@link LimitedPrivate} or&#10;  {@link Private}. &lt;br&gt;&#10;  All public classes must have InterfaceAudience annotation. &lt;br&gt;&#10;  &lt;ul&gt;&#10;  &lt;li&gt;Public classes that are not marked with this annotation must be&#10;  considered by default as {@link Private}.&lt;li&gt;&#10; &#10;  &lt;li&gt;External applications must only use classes that are marked&#10;  {@link Public}. Avoid using non public classes as these classes&#10;  could be removed or change in incompatible ways.&lt;li&gt;&#10; &#10;  &lt;li&gt;Some projects may choose to give special consideration to related&#10;  projects. Such consideration can be done by using the {@link LimitedPrivate}&#10;  annotation with a named set of projects.&lt;li&gt;&#10; &#10;  &lt;li&gt; Methods may have a different annotation that it is more restrictive&#10;  compared to the audience classification of the class. Example: A class&#10;  might be {@link Public}, but a method may be {@link LimitedPrivate}&#10;  &lt;li&gt;&lt;ul&gt;" />
      <item value="      Causes the current thread to wait, if necessary, until the&#10;      process represented by this {@code Process} object has&#10;      terminated, or the specified waiting time elapses.&#10;     &#10;      &lt;p&gt;If the process has already terminated then this method returns&#10;      immediately with the value {@code true}.  If the process has not&#10;      terminated and the timeout value is less than, or equal to, zero, then&#10;      this method returns immediately with the value {@code false}.&#10;     &#10;      &lt;p&gt;The default implementation of this methods polls the {@code exitValue}&#10;      to check if the process has terminated. Concrete implementations of this&#10;      class are strongly encouraged to override this method with a more&#10;      efficient implementation.&#10;     &#10;      @param timeout the maximum time to wait&#10;      @param unit the time unit of the {@code timeout} argument" />
      <item value="needs Escaping" />
      <item value="count Leading Backslash" />
      <item value="      Constructs a process builder with the specified operating&#10;      system program and arguments.  This constructor does &lt;i&gt;not&lt;i&gt;&#10;      make a copy of the {@code command} list.  Subsequent&#10;      updates to the list will be reflected in the state of the&#10;      process builder.  It is not checked whether&#10;      {@code command} corresponds to a valid operating system&#10;      command." />
      <item value="      Add a listener to the configuration, after the server modified the configuration, the client will use the&#10;      incoming listener callback. Recommended asynchronous processing, the application can implement the getExecutor&#10;      method in the ManagerListener, provide a thread pool of execution. If provided, use the main thread callback, May&#10;      block other configurations or be blocked by other configurations." />
      <item value="  Represents a predicate (boolean-valued function) of one argument.&#10; &#10;  &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;a&gt;&#10;  whose functional method is {@link test(Object)}.&#10; &#10;  @param &lt;T&gt; the type of the input to the predicate" />
      <item value="      Evaluates this predicate on the given argument.&#10;     &#10;      @param t the input argument&#10;      @return {@code true} if the input argument matches the predicate,&#10;      otherwise {@code false}" />
      <item value="Predicate" />
      <item value="compute If Absent" />
      <item value="fkey Constraints" />
      <item value="unique Consts" />
      <item value="Reverse" />
      <item value="    Returns the {@code int} value that is equal to {@code value}, if possible.&#10;   &#10;    @param value any value in the range of the {@code int} type&#10;    @return the {@code int} value that equals {@code value}&#10;    @throws IllegalArgumentException if {@code value} is greater than {@link IntegerMAX_VALUE} or&#10;        less than {@link IntegerMIN_VALUE}" />
      <item value="  Static utility methods pertaining to {@code int} primitives, that are not already found in either&#10;  {@link Integer} or {@link Arrays}.&#10; &#10;  &lt;p&gt;See the Guava User Guide article on &lt;a&#10;  href=&quot;https:github.comgoogleguavawikiPrimitivesExplained&quot;&gt;primitive utilities&lt;a&gt;." />
      <item value="      Convert a string to the Java literal and enclose it with double quotes.&#10;      Null will result in &quot;null&quot; (without double quotes)." />
      <item value="&#9;  Check if is a dialect reserved word of ANSI-SQL reserved word&#10;&#9;  &#10;&#9;  @return false:not reserved word. true:reserved by dialect or ANSI-SQL" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1693051790700" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1694606761507" />
  </component>
  <component name="Translation.Settings">
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="340" />
    <histories>
      <item value="Digest Util" />
      <item value="inited" />
      <item value="Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls update(input), passing the input array to the update method, then calls digest(). Params: input – the input to be updated before the digest is completed." />
      <item value="manufacturer" />
      <item value="serial" />
      <item value="get CPU Serial" />
      <item value="Identifier" />
      <item value="Immutable" />
      <item value="The CPU's identifier strings ,including name, vendor, stepping, model, and family information (also called the signature of a CPU). &lt;p&gt; The Processor Identifier is primarily associated with Intel-based chips. Attempts are made to provide comparable values for other chip manufacturers." />
      <item value="This class represents the entire Central Processing Unit (CPU) of a computer system, which may contain one or more physical packages (sockets), one or more physical processors (cores), and one or more logical processors (what the Operating System sees, which may include hyperthreaded cores.)" />
      <item value="get MAC Address Finger" />
      <item value="A network interface in the machine, including statistics. Thread safe for the designed use of retrieving the most recent data. Users should be aware that the updateAttributes() method may update attributes, including the time stamp, and should externally synchronize such usage to ensure consistent calculations." />
      <item value="Determines if the MAC address on this interface corresponds to a known Virtual Machine. Returns: true if the MAC address corresponds to a known virtual machine." />
      <item value="Gets a list NetworkIF objects, representing a network interface. Params: includeLocalInterfaces – whether to include local interfaces (loopback or no hardware address) in the result" />
      <item value="beaturing" />
      <item value="Cipher Param" />
      <item value="Returns the time when the license begins to be valid. The default is null. Returns: Value of property notBefore." />
      <item value="Returns the time when the license ends to be valid. The default is null. Returns: Value of property notAfter." />
      <item value="Sigar" />
      <item value="Checks the given password for compliance to the current password policy. The default policy implemented by this class ensures that the password is at least six characters long and consists of letters and digits." />
      <item value="!hasLetter || !hasDigit" />
      <item value="param.get License Path()" />
      <item value="Creates a directory by creating all nonexistent parent directories first. Unlike the createDirectory method, an exception is not thrown if the directory could not be created because it already exists. The attrs parameter is optional file-attributes to set atomically when creating the nonexistent directories. Each file attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. If this method fails, then it may do so after creating some, but not all, of the parent directories. Params: dir – the directory to create attrs – an optional list of file attributes to set atomically when creating the directory" />
      <item value="java: JPS incremental annotation processing is disabled. Compilation results on partial recompilation may be inaccurate. Use build process &quot;jps.track.ap.dependencies&quot; VM flag to enabledisable incremental annotation processing environment." />
      <item value="inaccurate" />
      <item value="Default Cipher Param" />
      <item value="glassfish" />
      <item value="only recognizes class file versions up to 55.0" />
      <item value="recognizes" />
      <item value="recent" />
      <item value="错误: 加载主类 de.shadowsoft.greenLicense.idgenerator.jfxclient.IdGenerator 时出现 LinkageError java.lang.UnsupportedClassVersionError: deshadowsoftgreenLicenseidgeneratorjfxclientIdGenerator has been compiled by a more recent version of the Java Runtime (class file version 57.0), this version of the Java Runtime only recognizes class file versions up to 55.0" />
      <item value="greenLicense Green license is a tool to license your software against misuse. Like any other piece of license software it is not impervious to circumvention, but it gives the attacker a good amount of work until they acquire ONE free version. How does it work? The manager Creating a key pair - The private key is used to issue a license to your software. - The public key is distributed with your software. Manage software - Create a software and assign a key to it. - Enter any amount of information you want to have in your software. It is always composed of an ID (the feature) and a value. For example how long the license is valid or what features are enabled. - you can set a default value for every feature - set a system identifier. This is to identify the system the license is valid for. Or don't, so the license is valid for every computer system. Currently, available are - MAC address (one must match) - Hostname - IP address (one must match) - OS (String of `env.os` must match) Issuing a license A license can be issued with the default values for a software or with custom values per license. CLI EXAMPLES Create a key pair ``` java -jar manager.jar keypair create --name &quot;MyCoolSoftware Version 1.0&quot; --size 4096 ``` This creates a key with the human-readable name `MyCoolSoftware Version 1.0` and a key size of `4096`. As a result of this operation you receive an ID. Let's assume it is `3a6b01bd-5f11-4cbe-87c4-c527895728a9`. This ID is used to identify your key. Save this ID for the next step. Keep in mind, that the key is here to protect your software. This means, if you have `Software A`, licensed by `Key A` and `Software B` also licensed by `Key A`, then `Software B` will recognize a license for `Software A` also as valid. The only thing preventing a misuse here would be any feature you might evaluate. So, it is good practice creating a new key pair for every software, or version you don't want to work with an older license. Create a software ``` java -jar manager.jar software create --key &quot;3a6b01bd-5f11-4cbe-87c4-c527895728a9&quot; --license 2 --name &quot;MyCoolSoftware&quot; --version &quot;1.0&quot; ``` This creates a software with human-readable name `MyCoolSoftware` in Version `1.0`. Bound to the key pair `3a6b01bd-5f11-4cbe-87c4-c527895728a9`. Now let's assume the software we have just created got the ID `bc777bbe-dc44-4a8c-9b2b-23c7cfd5a007`. We will need this ID to create features. Create a feature ``` java -jar manager.jar feature create --software &quot;bc777bbe-dc44-4a8c-9b2b-23c7cfd5a007&quot; --id &quot;MY-UNIQUE-FEATURE-ID&quot; --name &quot;MyFeature&quot; --default &quot;true&quot; ``` We have now created a feature with the ID `MY-UNIQUE-FEATURE-ID`. The name is just for us, so we can identify this feature in the manager. The value is set to &quot;true&quot; per default. So our software needs to evaluate that value to see if the feature is enabled. If no ID is set, a random UUID will be created. Issuing a license To get the ID for your system, simply ``` java -jar idgenerator.jar generate -m ``` This creates a binding for the network adapters and would result into something like ``` Selector: 0X01 Binding: y8bHTxdJqZVlGWPLRGy8zg4pTf9JJdneQV2JR3+dThdDN3VjsASdy87WMDDOxss3yTbEFdg= ``` This is your `binding` for this license. We have received the ID `y8bHTxdJqZVlGWPLRGy8zg4pTf9JJdneQV2JR3+dThdDN3VjsASdy87WMDDOxss3yTbEFdg=` from the system where the software will be installed, we are now able to issue the license. However, we want to disable our new feature for this client. ``` java -jar manager.jar license create --software bc777bbe-dc44-4a8c-9b2b-23c7cfd5a007 --feature my-unique-feature-id=false --binding &quot;y8bHTxdJqZVlGWPLRGy8zg4pTf9JJdneQV2JR3+dThdDN3VjsASdy87WMDDOxss3yTbEFdg=&quot; --name &quot;my first customer&quot; ``` If `binding` is omitted then the license will not be bound to a system and every system will be valid. Here we go. Our license has been issued (let's assume with ID `093889a8-a87f-4619-83a4-7d99f380b682`) to `my first customer` for software `bc777bbe-dc44-4a8c-9b2b-23c7cfd5a007`. Feature `my-unique-feature-id` has been set to `false` in this license. The license has been bound to the system with the ID `y8bHTxdJqZVlGWPLRGy8zg4pTf9JJdneQV2JR3+dThdDN3VjsASdy87WMDDOxss3yTbEFdg=`. Exporting the license Now, we just have to export our license to a file which we can send to the customer. For that we simply use ``` java -jar manager.jar license export --license 093889a8-a87f-4619-83a4-7d99f380b682 --file &quot;.licensesmy_first_customer.lic&quot; ``` License `093889a8-a87f-4619-83a4-7d99f380b682` is being exported to `.licensesmy_first_customer.lic`. Automation Of course, we have automation in mind. You can use the `-j` or `--json` switch in the CLI to receive a JSON result and process it to your liking. ``` java -jar manager.jar license export --license 093889a8-a87f-4619-83a4-7d99f380b682 --file &quot;.licensesmy_first_customer.lic&quot; --json ``` Will produce a json output with everything you need to know. Including your license in Base64-Format. ``` { &quot;exports&quot;: [ { &quot;base64License&quot;: &quot;W6Aj4AAAAgBYv0mpCGBo4aHaXWs1PTZd4cwTcpRmSgHZpcIg6UbQxcho1UIzha+ENXdbSyAhA4A1NtFk6H37U3boJwe6ezKHYDzzZ0CPzQ7DL3xjXJY6mMjbNeNuMwzJapqoJ9b308yeYDzVA45+rxUkCPf5b6jKTwJ9fvcY6r2IEDJZ2OGridKsBLAKaI33J4CQe5O6XO1pNvGkfsPK06J+tAZIKBK83EDSx+1HwhBzfHuoPhmDZLaVx6oNQl3Ug7kt3sNowmVRA4r53sQX4maKNKHA2yZbSRri4q09lvaHxDnupLerUWlczqBPqSjqPyeITuJkAcqj2Zy4JtgAWGJa4YV3eIK29HAZGP9876oJl2ho4kRnoM9pSnKLCl4F8Zun8wn4jPGpeXHj7RP4wjSlYuRgKHnA341LIKnPYel+oWv02Z2ZVrb5fwe91vTAaDM3FgMsFZVV4cafR2omRKKx+z5Fu+bYo9LwVOpF43dknmIGPA587O0yvVzb1qgQjJH3QJTe6SSBjGJ6k3xDVqwLirLXud04iqWnee75n0mEqa+AoVX+6UKxBFs9eFGwS4hRfZnNin4ANNh85Kk9hFpHZMyGQc8EiLwBCxCuM765CmZClNJIqIS0ftB7UVjbj8I1JGwyXXg0NVcCw8Lb4PUnndzlHPHY+wi5lAlc6wAAADAm6iWdyozpRW2lbwgGhqlFMnMzm4ysZX6d+zRCPNyhKfTO153Tof7D8mmiKazyINUAAAIAQHGkEeFTHxuKusjvhYVg87Mkes0eVeBZiVJC6C5+wQKrbrHe2nHpE5qrRowYmItkAyiis7kh6yZHpZV1ti78w73WfGRZ2nWqSPykH+cjU+qTPwFMN41s+3RGtGywQjtvKxithcSLJHk9qX6uHreCJPcnfbjQw35DHSkb6ZtklRieRSlvwNbWu+JdwmaRjf0qDBVQZ93te46zGLzxQ6SubjyUKB7ToyNlZZMPkUU2zs9QIRQtgTruQDhwvP+iVlZvtnvrHCyzZz67ApNFuQoHKqtcShVaJ21hlzTQ7Y6Ad0haXHqnIYtOk3cKX3zmNeXkngmqHx0hq3n8SJVy7LsuCh0ki8taLJQOUzQ9o1syn1ArEcM7bwCXWBa8eOXm+V1UH9L2MP3hWpOrocZzTjp0t0g1DCYUBsD5r1EQeZ0320ZkCX3LFxKTHizYDRDBHGUK5RcgWwnn5cbcCcgu0hs0VooU3sXu0GBg5JvU5dQfYvDMJjQX5SoHC+K7cKyb6+pGJDAOWFsqhPb6vAh6S9Mn3+s40sPL71+YTo+OxfPbUacXoTicohzOVmIdardgBXpwZHJLfMKZ1DiBasrRYuXC0g5omXFpC4LBR7nFp6FURweQJfsKJ+0HZ3Q+lVa3DWYrIQwV80bSYj1hjhabo21CNnZ7WojeLxOIsNA\u003d&quot;, &quot;filePath&quot;: &quot;D:\\showcase\\greenLicense\\manager\\.\\licenses\\my_first_customer.lic&quot;, &quot;license&quot;: { &quot;id&quot;: &quot;093889a8-a87f-4619-83a4-7d99f380b682&quot;, &quot;systemId&quot;: &quot;y8bHTxdJqZVlGWPLRGy8zg4pTf9JJdneQV2JR3+dThdDN3VjsASdy87WMDDOxss3yTbEFdg=&quot;, &quot;name&quot;: &quot;my first customer&quot;, &quot;software&quot;: { &quot;features&quot;: [ { &quot;id&quot;: &quot;my-unique-feature-id&quot;, &quot;name&quot;: &quot;MyFeature&quot;, &quot;value&quot;: &quot;false&quot; } ], &quot;id&quot;: &quot;bc777bbe-dc44-4a8c-9b2b-23c7cfd5a007&quot;, &quot;keyPairId&quot;: &quot;3a6b01bd-5f11-4cbe-87c4-c527895728a9&quot;, &quot;name&quot;: &quot;MyCoolSoftware&quot;, &quot;version&quot;: &quot;1.0&quot; } } } ], &quot;errorMessages&quot;: [], &quot;success&quot;: true } ``` The reader How to use the license reader in my software? First you have to include the `common`-module in your project. Example - reading license from file Get the public key as bytes with the following command: ``` java -jar manager.jar keypair show --id 3a6b01bd-5f11-4cbe-87c4-c527895728a9 -b ``` Take the byte output and hard code it into your program just like in the example class below: ``` import de.shadowsoft.greenLicense.common.exception.DecryptionException; import de.shadowsoft.greenLicense.common.exception.InvalidSignatureException; import de.shadowsoft.greenLicense.common.exception.SystemValidationException; import de.shadowsoft.greenLicense.common.license.GreenLicense; import de.shadowsoft.greenLicense.common.license.GreenLicenseReader; import de.shadowsoft.greenLicense.common.license.GreenLicenseValidator; import java.io.IOException; import java.util.Map; public class Example { private static byte pk[] = new byte[]{ (byte) 0x30, (byte) 0x82, (byte) 0x02, (byte) 0x22, (byte) 0x30, (byte) 0x0D, (byte) 0x06, (byte) 0x09, (byte) 0x2A, (byte) 0x86, (byte) 0x48, (byte) 0x86, (byte) 0xF7, (byte) 0x0D, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x05, (byte) 0x00, (byte) 0x03, (byte) 0x82, (byte) 0x02, (byte) 0x0F, (byte) 0x00, (byte) 0x30, (byte) 0x82, (byte) 0x02, (byte) 0x0A, (byte) 0x02, (byte) 0x82, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0x97, (byte) 0x57, (byte) 0x7A, (byte) 0x51, (byte) 0xD8, (byte) 0x4A, (byte) 0x5A, (byte) 0x99, (byte) 0xEB, (byte) 0xCB, (byte) 0xEE, (byte) 0xB3, (byte) 0x9C, (byte) 0xA8, (byte) 0x1D, (byte) 0xB9, (byte) 0x77, (byte) 0xB7, (byte) 0xC7, (byte) 0xBC, (byte) 0x01, (byte) 0x95, (byte) 0xFF, (byte) 0x1F, (byte) 0x3E, (byte) 0x9C, (byte) 0xE3, (byte) 0xD3, (byte) 0x9E, (byte) 0x88, (byte) 0x9D, (byte) 0xC4, (byte) 0xDA, (byte) 0x22, (byte) 0xCD, (byte) 0xD7, (byte) 0xF8, (byte) 0x09, (byte) 0xE5, (byte) 0x5A, (byte) 0x90, (byte) 0xFE, (byte) 0x3F, (byte) 0x36, (byte) 0x8B, (byte) 0x6A, (byte) 0x87, (byte) 0x2E, (byte) 0x52, (byte) 0xCA, (byte) 0x3A, (byte) 0x48, (byte) 0xB7, (byte) 0xC8, (byte) 0xA8, (byte) 0x3D, (byte) 0x5B, (byte) 0x93, (byte) 0x46, (byte) 0xFE, (byte) 0xC3, (byte) 0xCE, (byte) 0x52, (byte) 0x37, (byte) 0xC4, (byte) 0x9B, (byte) 0x84, (byte) 0xCE, (byte) 0xDA, (byte) 0x06, (byte) 0xCA, (byte) 0x17, (byte) 0x6C, (byte) 0xC7, (byte) 0xBA, (byte) 0x1C, (byte) 0x77, (byte) 0xD5, (byte) 0xCE, (byte) 0xC4, (byte) 0x38, (byte) 0x3B, (byte) 0x3F, (byte) 0x24, (byte) 0x47, (byte) 0xAA, (byte) 0x02, (byte) 0x08, (byte) 0x0C, (byte) 0x0D, (byte) 0xA7, (byte) 0xD4, (byte) 0x52, (byte) 0xFB, (byte) 0xE5, (byte) 0x39, (byte) 0x07, (byte) 0x9B, (byte) 0xB7, (byte) 0xE3, (byte) 0xFA, (byte) 0xB9, (byte) 0xB2, (byte) 0x1B, (byte) 0xC4, (byte) 0x91, (byte) 0x75, (byte) 0xE7, (byte) 0x4B, (byte) 0x90, (byte) 0xC8, (byte) 0x9A, (byte) 0x90, (byte) 0x06, (byte) 0x15, (byte) 0xF9, (byte) 0x21, (byte) 0xD8, (byte) 0x66, (byte) 0xDF, (byte) 0x18, (byte) 0xC2, (byte) 0xF1, (byte) 0xCF, (byte) 0xD0, (byte) 0x74, (byte) 0x2A, (byte) 0x59, (byte) 0x9D, (byte) 0x15, (byte) 0xE5, (byte) 0x4D, (byte) 0x53, (byte) 0xB2, (byte) 0xC6, (byte) 0x3B, (byte) 0xD7, (byte) 0x56, (byte) 0x75, (byte) 0xCD, (byte) 0x79, (byte) 0x36, (byte) 0x54, (byte) 0x44, (byte) 0x7A, (byte) 0xEA, (byte) 0x96, (byte) 0x31, (byte) 0x84, (byte) 0xEB, (byte) 0xA3, (byte) 0xCF, (byte) 0x5A, (byte) 0x16, (byte) 0x91, (byte) 0xDB, (byte) 0xE7, (byte) 0x70, (byte) 0xC7, (byte) 0x7E, (byte) 0xD4, (byte) 0x50, (byte) 0xA2, (byte) 0x47, (byte) 0xC9, (byte) 0xC1, (byte) 0xFF, (byte) 0x7E, (byte) 0x6C, (byte) 0x76, (byte) 0x1A, (byte) 0x02, (byte) 0x53, (byte) 0xB2, (byte) 0x9B, (byte) 0xD3, (byte) 0xD5, (byte) 0x8F, (byte) 0x50, (byte) 0xC1, (byte) 0x0C, (byte) 0x1C, (byte) 0x72, (byte) 0xA7, (byte) 0xE6, (byte) 0x71, (byte) 0x02, (byte) 0xBF, (byte) 0x8D, (byte) 0x01, (byte) 0x45, (byte) 0xA3, (byte) 0xA5, (byte) 0xA6, (byte) 0x97, (byte) 0x53, (byte) 0xA9, (byte) 0x98, (byte) 0x31, (byte) 0x22, (byte) 0xED, (byte) 0xB6, (byte) 0xF4, (byte) 0xA9, (byte) 0xAC, (byte) 0x41, (byte) 0xD3, (byte) 0x74, (byte) 0x95, (byte) 0x05, (byte) 0xB5, (byte) 0xBF, (byte) 0x2D, (byte) 0x3B, (byte) 0x1C, (byte) 0xF9, (byte) 0x15, (byte) 0xA7, (byte) 0x14, (byte) 0x49, (byte) 0x9D, (byte) 0x5E, (byte) 0x1E, (byte) 0x78, (byte) 0xE6, (byte) 0x1A, (byte) 0x9A, (byte) 0xDD, (byte) 0xCB, (byte) 0x8F, (byte) 0x1D, (byte) 0xD2, (byte) 0xB7, (byte) 0x7D, (byte) 0xBB, (byte) 0x8A, (byte) 0xC1, (byte) 0xBA, (byte) 0xCE, (byte) 0xDF, (byte) 0x30, (byte) 0x34, (byte) 0xA0, (byte) 0xE3, (byte) 0x37, (byte) 0x3D, (byte) 0x0F, (byte) 0xA2, (byte) 0x56, (byte) 0xB2, (byte) 0x38, (byte) 0xD1, (byte) 0xCF, (byte) 0xF9, (byte) 0x2B, (byte) 0x03, (byte) 0x1F, (byte) 0xD1, (byte) 0xA4, (byte) 0xD1, (byte) 0x83, (byte) 0x1E, (byte) 0x70, (byte) 0x6C, (byte) 0x8F, (byte) 0xD3, (byte) 0x86, (byte) 0xC9, (byte) 0x58, (byte) 0xE9, (byte) 0x9B, (byte) 0xC2, (byte) 0x33, (byte) 0xBF, (byte) 0x98, (byte) 0x83, (byte) 0x9B, (byte) 0xAD, (byte) 0xCB, (byte) 0x41, (byte) 0xFC, (byte) 0xE0, (byte) 0x30, (byte) 0xD5, (byte) 0xBA, (byte) 0x0A, (byte) 0xEE, (byte) 0xDE, (byte) 0x95, (byte) 0x0D, (byte) 0xB9, (byte) 0x7D, (byte) 0x13, (byte) 0x51, (byte) 0xB5, (byte) 0x89, (byte) 0xF1, (byte) 0xAE, (byte) 0x18, (byte) 0x1E, (byte) 0xF3, (byte) 0x5C, (byte) 0xF2, (byte) 0x59, (byte) 0x09, (byte) 0xF3, (byte) 0x80, (byte) 0x0B, (byte) 0xAA, (byte) 0x8E, (byte) 0xCC, (byte) 0xF9, (byte) 0x2E, (byte) 0x6F, (byte) 0xCE, (byte) 0xA9, (byte) 0x75, (byte) 0xF7, (byte) 0x77, (byte) 0x4D, (byte) 0x8B, (byte) 0xA6, (byte) 0xFD, (byte) 0x80, (byte) 0x3E, (byte) 0x07, (byte) 0xDF, (byte) 0x4E, (byte) 0xAB, (byte) 0x2D, (byte) 0x89, (byte) 0x9F, (byte) 0x4E, (byte) 0x17, (byte) 0xEF, (byte) 0x8B, (byte) 0xF9, (byte) 0x96, (byte) 0xBF, (byte) 0x0D, (byte) 0x97, (byte) 0x96, (byte) 0x10, (byte) 0x26, (byte) 0xF8, (byte) 0x93, (byte) 0x73, (byte) 0xB6, (byte) 0x58, (byte) 0x23, (byte) 0x9A, (byte) 0x49, (byte) 0x6D, (byte) 0x7A, (byte) 0x94, (byte) 0xB4, (byte) 0x92, (byte) 0xC7, (byte) 0x49, (byte) 0x2F, (byte) 0x57, (byte) 0x59, (byte) 0x20, (byte) 0xED, (byte) 0xF1, (byte) 0x9E, (byte) 0x80, (byte) 0x4B, (byte) 0x22, (byte) 0xCE, (byte) 0xE0, (byte) 0x38, (byte) 0x55, (byte) 0x83, (byte) 0x72, (byte) 0x5A, (byte) 0x7B, (byte) 0xF0, (byte) 0x53, (byte) 0xBF, (byte) 0x7B, (byte) 0xCF, (byte) 0x7D, (byte) 0x8C, (byte) 0x6C, (byte) 0x45, (byte) 0x99, (byte) 0xE2, (byte) 0x35, (byte) 0xEC, (byte) 0xED, (byte) 0xAF, (byte) 0x48, (byte) 0x87, (byte) 0x10, (byte) 0x0A, (byte) 0xB1, (byte) 0xD9, (byte) 0xC4, (byte) 0xE1, (byte) 0x1E, (byte) 0x6A, (byte) 0xF0, (byte) 0x7B, (byte) 0x7D, (byte) 0x41, (byte) 0x8E, (byte) 0x99, (byte) 0x39, (byte) 0x36, (byte) 0x0A, (byte) 0x04, (byte) 0x98, (byte) 0x7E, (byte) 0xF8, (byte) 0xE3, (byte) 0x18, (byte) 0xF2, (byte) 0x08, (byte) 0x85, (byte) 0x6C, (byte) 0x26, (byte) 0xED, (byte) 0xB1, (byte) 0xCD, (byte) 0x42, (byte) 0xA8, (byte) 0x81, (byte) 0x0D, (byte) 0x91, (byte) 0x37, (byte) 0xEF, (byte) 0x10, (byte) 0x07, (byte) 0x2A, (byte) 0x04, (byte) 0x1A, (byte) 0x7D, (byte) 0xD1, (byte) 0x43, (byte) 0x35, (byte) 0xD1, (byte) 0x77, (byte) 0xD4, (byte) 0x60, (byte) 0xA7, (byte) 0xCC, (byte) 0x9A, (byte) 0x8D, (byte) 0xEF, (byte) 0x80, (byte) 0x7A, (byte) 0x6F, (byte) 0x40, (byte) 0x8B, (byte) 0x14, (byte) 0x85, (byte) 0x3B, (byte) 0x6F, (byte) 0xCD, (byte) 0xFE, (byte) 0x61, (byte) 0x61, (byte) 0x60, (byte) 0xFD, (byte) 0x36, (byte) 0xC0, (byte) 0x80, (byte) 0x38, (byte) 0x92, (byte) 0x77, (byte) 0x62, (byte) 0x33, (byte) 0x58, (byte) 0xBD, (byte) 0x7D, (byte) 0x70, (byte) 0xB1, (byte) 0xED, (byte) 0x52, (byte) 0x9F, (byte) 0xDE, (byte) 0xA2, (byte) 0x0A, (byte) 0xD2, (byte) 0xA0, (byte) 0xB7, (byte) 0xE9, (byte) 0xE3, (byte) 0xB9, (byte) 0xAC, (byte) 0xDA, (byte) 0x84, (byte) 0x16, (byte) 0xAA, (byte) 0xAF, (byte) 0x1D, (byte) 0x4A, (byte) 0xB9, (byte) 0x4E, (byte) 0x7A, (byte) 0x3D, (byte) 0x2C, (byte) 0x8A, (byte) 0xDF, (byte) 0x16, (byte) 0xB0, (byte) 0xEB, (byte) 0x26, (byte) 0x2E, (byte) 0x3C, (byte) 0x9D, (byte) 0x02, (byte) 0x03, (byte) 0x01, (byte) 0x00, (byte) 0x01 }; public static void main(String[] args) { GreenLicenseValidator validator = new GreenLicenseReader(pk); try { GreenLicense license = validator.readLicenseFromFile(&quot;D:\\showcase\\greenLicense\\manager\\license\\test.lic&quot;); if (license.isValid()) { System.out.println(&quot;License OK!&quot;); for (Map.Entry&lt;String, String&gt; feature : license.getFeature().entrySet()) { System.out.println(feature.getKey() + &quot;=&quot; + feature.getValue()); } } else { System.err.println(&quot;License invalid!&quot;); } } catch (IOException | DecryptionException | SystemValidationException | InvalidSignatureException e) { e.printStackTrace(); } } } ``` `license.isValid()` checks if the license is valid. - correct header - correct signature - correct system (if bound) The features can be retrieved as a String map where the `key` is the feature ID and the `value` is the feature value. Known issues - none so far" />
      <item value="A {@link TableView} is made up of a number of TableColumn instances. Each TableColumn in a table is responsible for displaying (and editing) the contents of that column. As well as being responsible for displaying and editing data for a single column, a TableColumn also contains the necessary properties to: &lt;ul&gt; &lt;li&gt;Be resized (using {@link minWidthProperty() minWidth}{@link prefWidthProperty() prefWidth}{@link maxWidthProperty() maxWidth} and {@link widthProperty() width} properties) &lt;li&gt;Have its {@link visibleProperty() visibility} toggled &lt;li&gt;Display {@link textProperty() header text} &lt;li&gt;Display any {@link getColumns() nested columns} it may contain &lt;li&gt;Have a {@link contextMenuProperty() context menu} when the user right-clicks the column header area &lt;li&gt;Have the contents of the table be sorted (using {@link comparatorProperty() comparator}, {@link sortableProperty() sortable} and {@link sortTypeProperty() sortType}) &lt;ul&gt;" />
      <item value="Copyright (c) 2010, 2019, Oracle andor its affiliates. All rights reserved. DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. This code is free software; you can redistribute it andor modify it under the terms of the GNU General Public License version 2 only, as published by the Free Software Foundation. Oracle designates this particular file as subject to the &quot;Classpath&quot; exception as provided by Oracle in the LICENSE file that accompanied this code. This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License version 2 for more details (a copy is included in the LICENSE file that accompanied this code). You should have received a copy of the GNU General Public License version 2 along with this work; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA or visit www.oracle.com if you need additional information or have any questions." />
      <item value="invalid" />
      <item value="ArithmeticException – if divisor==0, or roundingMode==ROUND_UNNECESSARY and this.scale() is insufficient to represent the result of the division exactly." />
      <item value="ROUND UNNECESSARY" />
      <item value="rounding Mode" />
      <item value="multiply" />
      <item value="set Use Deprecated Executor" />
      <item value="propagation" />
      <item value="Quartz Quick Job Builder" />
      <item value="legacy" />
      <item value="peer Dependencies" />
      <item value="Stealth" />
      <item value="FIXED" />
      <item value="Simple holder class that associates a LocaleContext instance with the current thread. The LocaleContext will be inherited by any child threads spawned by the current thread if the inheritable flag is set to true. Used as a central holder for the current Locale in Spring, wherever necessary: for example, in MessageSourceAccessor. DispatcherServlet automatically exposes its current Locale here. Other applications can expose theirs too, to make classes like MessageSourceAccessor automatically use that Locale." />
      <item value="Enumeration" />
      <item value="Create a new CentralDirectoryEndRecord instance from the specified RandomAccessData, searching backwards from the end until a valid block is located. Params: data – the source data" />
      <item value="Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond the end of the file does not change the file length. The file length will change only by writing after the offset has been set beyond the end of the file. Params: pos – the offset position, measured in bytes from the beginning of the file, at which to set the file pointer. Throws: IOException – if pos is less than 0 or if an IO error occurs." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="192" />
        <entry key="CROATIAN" value="1" />
        <entry key="ENGLISH" value="193" />
        <entry key="FRENCH" value="4" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SESOTHO" value="1" />
      </map>
    </option>
  </component>
</application>