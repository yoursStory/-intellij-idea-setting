<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="580" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Copilot" />
      <item value="indices" />
      <item value="  &#10;    Set the limit of rows for this scan. We will terminate the scan if the number of returned rows&#10;    reaches this value.&#10;    &lt;p&gt;&#10;    This condition will be tested at last, after all other conditions such as stopRow, filter, etc.&#10;    @param limit the limit of rows for this scan" />
      <item value="Aviator Evaluator" />
      <item value="Mutator Callback" />
      <item value="add Fuzzy Row Filter" />
      <item value="BALANCE" />
      <item value="BALANCE ERROR" />
      <item value="Assert" />
      <item value="PDM EMPTY COLUMN TYPE ERROR" />
      <item value="exist" />
      <item value="EXSIT" />
      <item value="sync" />
      <item value="create Multiset Table String" />
      <item value="transientable" />
      <item value="is Reserved Word" />
      <item value="check Not Empty Reserved Words" />
      <item value="get Indices" />
      <item value="LONGTEXT" />
      <item value="precision" />
      <item value="CLICKHOUSE" />
      <item value="truncate Table Async" />
      <item value="    Creates a new table with the specified number of regions.  The start key specified will become&#10;    the end key of the first region of the table, and the end key specified will become the start&#10;    key of the last region of the table (the first region has a null start key and the last region&#10;    has a null end key). BigInteger math will be used to divide the key range specified into enough&#10;    segments to make the required number of total regions. Synchronous operation.&#10;   &#10;    @param desc table descriptor for table&#10;    @param startKey beginning of key range&#10;    @param endKey end of key range&#10;    @param numRegions the total number of regions to create&#10;    @throws IllegalArgumentException if the table name is reserved&#10;    @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running&#10;    @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent&#10;    threads, the table may have been created between " />
      <item value="    Return the list of attached co-processor represented&#10;   &#10;    @return The list of CoprocessorDescriptor" />
      <item value=" TableDescriptor contains the details about an HBase table such as the descriptors of&#10;  all the column families, is the table a catalog table, &lt;code&gt; hbase:meta &lt;code&gt;,&#10;  if the table is read only, the maximum size of the memstore,&#10;  when the region split should occur, coprocessors associated with it etc..." />
      <item value="PREFETCH BLOCKS ON OPEN" />
      <item value="COMPRESSION" />
      <item value="KEEP DELETED CELLS" />
      <item value="NEW VERSION BEHAVIOR" />
      <item value="EVICT BLOCKS ON CLOSE" />
      <item value="      A map which holds the configuration specific to the column family. The&#10;      keys of the map have the same names as config keys and override the&#10;      defaults with cf-specific settings. Example usage may be for compactions,&#10;      etc." />
      <item value="    Pattern that matches a coprocessor specification. Form is:&#10;    {@code &lt;coprocessor jar file location&gt; '|' &lt;class name&gt; ['|' &lt;priority&gt; ['|' &lt;arguments&gt;]]}&#10;    where arguments are {@code &lt;KEY&gt; '=' &lt;VALUE&gt; [,...]}&#10;    For example: {@code hdfs:foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2}" />
      <item value="   Used by HBase Shell interface to access this metadata&#10;    attribute which denotes the maximum size of the store file after which a&#10;    region split occurs." />
      <item value="  Annotation to inform users of a package, class or method's intended audience.&#10;  Currently the audience can be {@link Public}, {@link LimitedPrivate} or&#10;  {@link Private}. &lt;br&gt;&#10;  All public classes must have InterfaceAudience annotation. &lt;br&gt;&#10;  &lt;ul&gt;&#10;  &lt;li&gt;Public classes that are not marked with this annotation must be&#10;  considered by default as {@link Private}.&lt;li&gt;&#10; &#10;  &lt;li&gt;External applications must only use classes that are marked&#10;  {@link Public}. Avoid using non public classes as these classes&#10;  could be removed or change in incompatible ways.&lt;li&gt;&#10; &#10;  &lt;li&gt;Some projects may choose to give special consideration to related&#10;  projects. Such consideration can be done by using the {@link LimitedPrivate}&#10;  annotation with a named set of projects.&lt;li&gt;&#10; &#10;  &lt;li&gt; Methods may have a different annotation that it is more restrictive&#10;  compared to the audience classification of the class. Example: A class&#10;  might be {@link Public}, but a method may be {@link LimitedPrivate}&#10;  &lt;li&gt;&lt;ul&gt;" />
      <item value="      Causes the current thread to wait, if necessary, until the&#10;      process represented by this {@code Process} object has&#10;      terminated, or the specified waiting time elapses.&#10;     &#10;      &lt;p&gt;If the process has already terminated then this method returns&#10;      immediately with the value {@code true}.  If the process has not&#10;      terminated and the timeout value is less than, or equal to, zero, then&#10;      this method returns immediately with the value {@code false}.&#10;     &#10;      &lt;p&gt;The default implementation of this methods polls the {@code exitValue}&#10;      to check if the process has terminated. Concrete implementations of this&#10;      class are strongly encouraged to override this method with a more&#10;      efficient implementation.&#10;     &#10;      @param timeout the maximum time to wait&#10;      @param unit the time unit of the {@code timeout} argument" />
      <item value="needs Escaping" />
      <item value="count Leading Backslash" />
      <item value="      Constructs a process builder with the specified operating&#10;      system program and arguments.  This constructor does &lt;i&gt;not&lt;i&gt;&#10;      make a copy of the {@code command} list.  Subsequent&#10;      updates to the list will be reflected in the state of the&#10;      process builder.  It is not checked whether&#10;      {@code command} corresponds to a valid operating system&#10;      command." />
      <item value="      Add a listener to the configuration, after the server modified the configuration, the client will use the&#10;      incoming listener callback. Recommended asynchronous processing, the application can implement the getExecutor&#10;      method in the ManagerListener, provide a thread pool of execution. If provided, use the main thread callback, May&#10;      block other configurations or be blocked by other configurations." />
      <item value="  Represents a predicate (boolean-valued function) of one argument.&#10; &#10;  &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;a&gt;&#10;  whose functional method is {@link test(Object)}.&#10; &#10;  @param &lt;T&gt; the type of the input to the predicate" />
      <item value="      Evaluates this predicate on the given argument.&#10;     &#10;      @param t the input argument&#10;      @return {@code true} if the input argument matches the predicate,&#10;      otherwise {@code false}" />
      <item value="Predicate" />
      <item value="compute If Absent" />
      <item value="fkey Constraints" />
      <item value="unique Consts" />
      <item value="Reverse" />
      <item value="    Returns the {@code int} value that is equal to {@code value}, if possible.&#10;   &#10;    @param value any value in the range of the {@code int} type&#10;    @return the {@code int} value that equals {@code value}&#10;    @throws IllegalArgumentException if {@code value} is greater than {@link IntegerMAX_VALUE} or&#10;        less than {@link IntegerMIN_VALUE}" />
      <item value="  Static utility methods pertaining to {@code int} primitives, that are not already found in either&#10;  {@link Integer} or {@link Arrays}.&#10; &#10;  &lt;p&gt;See the Guava User Guide article on &lt;a&#10;  href=&quot;https:github.comgoogleguavawikiPrimitivesExplained&quot;&gt;primitive utilities&lt;a&gt;." />
      <item value="      Convert a string to the Java literal and enclose it with double quotes.&#10;      Null will result in &quot;null&quot; (without double quotes)." />
      <item value="&#9;  Check if is a dialect reserved word of ANSI-SQL reserved word&#10;&#9;  &#10;&#9;  @return false:not reserved word. true:reserved by dialect or ANSI-SQL" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1683609221094" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1685168582287" />
  </component>
  <component name="Translation.States">
    <histories>
      <item value="Output Capture Extension" />
      <item value="violations" />
      <item value="Failure to find org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.9.0-Beta1 in https:maven.aliyun.comrepositorycentral was cached in the local repository, resolution will not be reattempted until the update interval of aliyunmaven has elapsed or updates are forced" />
      <item value="Listener for the {@link SpringApplication} {@code run} method. {@link SpringApplicationRunListener}s are loaded via the {@link SpringFactoriesLoader} and should declare a public constructor that accepts a {@link SpringApplication} instance and a {@code String[]} of arguments. A new {@link SpringApplicationRunListener} instance will be created for each run." />
      <item value="executions" />
      <item value="set Anchor State" />
      <item value="Wx Ma Redis Better Config Impl" />
      <item value="Pending" />
      <item value="Task Pending Holder" />
      <item value="Assemble Action" />
      <item value="recall" />
      <item value="is Discard" />
      <item value="title Suffer" />
      <item value="formattor" />
      <item value="An object that implements the Enumeration interface generates a series of elements, one at a time. Successive calls to the nextElement method return successive elements of the series. For example, to print all elements of a Vector&lt;E&gt; v: for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();) System.out.println(e.nextElement()); Methods are provided to enumerate through the elements of a vector, the keys of a hashtable, and the values in a hashtable. Enumerations are also used to specify the input streams to a SequenceInputStream. API Note: The functionality of this interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration. It is possib" />
      <item value="Number of units of time to delay before the first execution of a fixedRate or fixedDelay task. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the initial" />
      <item value="Execute the annotated method with a fixed period between invocations. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the period" />
      <item value="get Instance" />
      <item value="Compare this snippet from" />
      <item value="interval Minutes" />
      <item value="trigger" />
      <item value="set Interceptors" />
      <item value="refreshable Authorize Token" />
      <item value="validity Period" />
      <item value="authorization" />
      <item value="Authorization Provider" />
      <item value="Retrieves and removes the head of this queue, or returns null if this queue is empty. Returns: the head of this queue, or null if this queue is empty" />
      <item value="Extracts element at current take position, advances, and signals. Call only when holding lock." />
      <item value="poll" />
      <item value="fair" />
      <item value="capacity" />
      <item value="Array Blocking Queue" />
      <item value="Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the head of the queue is that element which would be removed by a call to remove() or poll(). In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules. Every Queue implementation must specify its ordering properties. The offer method inserts an element if possible, otherwise returning false. This differs from the Collection.add method, which can fail to add an element only by throwing an unchecked exception. The offer method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or &quot;bounded&quot;) queues. The remove() and poll() methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The remove() and poll() methods differ only in their behavior when the queue is empty: the remove() method throws an exception, while the poll() method returns null. The element() and peek() methods return, but do not remove, the head of the queue. The Queue interface does not define the blocking queue methods, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the java.util.concurrent.BlockingQueue interface, which extends this interface. Queue implementations generally do not allow insertion of null elements, although some implementations, such as LinkedList, do not prohibit insertion of null. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the poll method to indicate that the queue contains no elements. Queue implementations generally do not define element-based versions of methods equals and hashCode but instead inherit the identity based versions from class Object, because element-based equality is not always well-defined for queues with the same elements but different ordering properties." />
      <item value="Ready" />
      <item value="空闲" />
      <item value="Switch Status" />
      <item value="ACTIVE" />
      <item value="Inactive" />
      <item value="Subscribe Status" />
      <item value="umber of units of time to delay before the first execution of a fixedRate or fixedDelay task. The time unit is milliseconds by default but can be overridden via timeUnit. Returns: the initial" />
      <item value="Generated Criteria" />
      <item value="Name Mapping Intercepter" />
      <item value="process" />
      <item value="Data Intercepter" />
      <item value="Daas Dimension Reader" />
      <item value="Simple Handler Chain" />
      <item value="Data Writer" />
      <item value="Immutable Pair" />
      <item value="schema Name" />
      <item value="pdm model column no refer error" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="47" />
        <entry key="ENGLISH" value="48" />
        <entry key="FRENCH" value="2" />
      </map>
    </option>
  </component>
</application>