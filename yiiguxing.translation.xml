<application>
  <component name="AppStorage">
    <histories>
      <item value="a table name pattern; must match the&#10;             table name as it is stored in the database" />
      <item value="      Retrieves a description of the tables available in the given catalog.&#10;      Only table descriptions matching the catalog, schema, table&#10;      name and type criteria are returned.  They are ordered by&#10;      &lt;code&gt;TABLE_TYPE&lt;code&gt;, &lt;code&gt;TABLE_CAT&lt;code&gt;,&#10;      &lt;code&gt;TABLE_SCHEM&lt;code&gt; and &lt;code&gt;TABLE_NAME&lt;code&gt;.&#10;      &lt;P&gt;&#10;      Each table description has the following columns:" />
      <item value="  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods return lists of information&#10;  in the form of &lt;code&gt;ResultSet&lt;code&gt; objects.&#10;  Regular &lt;code&gt;ResultSet&lt;code&gt; methods, such as&#10;  &lt;code&gt;getString&lt;code&gt; and &lt;code&gt;getInt&lt;code&gt;, can be used&#10;  to retrieve the data from these &lt;code&gt;ResultSet&lt;code&gt; objects.  If&#10;  a given form of metadata is not available, an empty &lt;code&gt;ResultSet&lt;code&gt;&#10;  will be returned. Additional columns beyond the columns defined to be&#10;  returned by the &lt;code&gt;ResultSet&lt;code&gt; object for a given method&#10;  can be defined by the JDBC driver vendor and must be accessed&#10;  by their &lt;B&gt;column label&lt;B&gt;.&#10;  &lt;P&gt;&#10;  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods take arguments that are&#10;  String patterns.  These arguments all have names such as fooPattern.&#10;  Within a pattern String, &quot;%&quot; means match any substring of 0 or more&#10;  characters, and &quot;_&quot; means match any one character. Only metadata&#10;  entries matching the search pattern are returned. If a search pattern&#10;  argument is set to &lt;code&gt;null&lt;code&gt;, that argument's criterion will&#10;  be dropped from the search.&#10; " />
      <item value="  A user for this interface is commonly a tool that needs to discover how to&#10;  deal with the underlying DBMS.  This is especially true for applications&#10;  that are intended to be used with more than one DBMS. For example, a tool might use the method&#10;  &lt;code&gt;getTypeInfo&lt;code&gt; to find out what data types can be used in a&#10;  &lt;code&gt;CREATE TABLE&lt;code&gt; statement.  Or a user might call the method&#10;  &lt;code&gt;supportsCorrelatedSubqueries&lt;code&gt; to see if it is possible to use&#10;  a correlated subquery or &lt;code&gt;supportsBatchUpdates&lt;code&gt; to see if it is&#10;  possible to use batch updates.&#10;  &lt;P&gt;&#10;  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods return lists of information&#10;  in the form of &lt;code&gt;ResultSet&lt;code&gt; objects.&#10;  Regular &lt;code&gt;ResultSet&lt;code&gt; methods, such as&#10;  &lt;code&gt;getString&lt;code&gt; and &lt;code&gt;getInt&lt;code&gt;, can be used&#10;  to retrieve the data from these &lt;code&gt;ResultSet&lt;code&gt; objects.  If&#10;  a given form of metadata is not available, an empty &lt;code&gt;ResultSet&lt;code&gt;&#10;  will be returned. Additional columns beyond the columns defined to be&#10;  returned by the &lt;code&gt;ResultSet&lt;code&gt; object for a given method&#10;  can be defined by the JDBC driver vendor and must be accessed&#10;  by their &lt;B&gt;column label&lt;B&gt;." />
      <item value="  Comprehensive information about the database as a whole.&#10;  &lt;P&gt;&#10;  This interface is implemented by driver vendors to let users know the capabilities&#10;  of a Database Management System (DBMS) in combination with&#10;  the driver based on JDBC&amp;trade; technology&#10;  (&quot;JDBC driver&quot;) that is used with it.  Different relational DBMSs often support&#10;  different features, implement features in different ways, and use different&#10;  data types.  In addition, a driver may implement a feature on top of what the&#10;  DBMS offers.  Information returned by methods in this interface applies&#10;  to the capabilities of a particular driver and a particular DBMS working&#10;  together. Note that as used in this documentation, the term &quot;database&quot; is&#10;  used generically to refer to both the driver and DBMS." />
      <item value="determine Data Source" />
      <item value="Wildcard Devoted DB Meta Resolver" />
      <item value="JDBC Compatiblity" />
      <item value="Infinity" />
      <item value="exchange" />
      <item value="Data Source Transaction Manager" />
      <item value="Wildcard" />
      <item value="parse Inject Value" />
      <item value="cascade" />
      <item value="microsecond" />
      <item value="drills" />
      <item value="Condition Translate Data Source" />
      <item value="Request Indicator" />
      <item value="output Depend Indicator" />
      <item value="Performs" />
      <item value="is Xdr Query" />
      <item value="Dimension" />
      <item value="      &lt;p&gt;Populate the JavaBeans properties of the specified bean, based on&#10;      the specified namevalue pairs.&lt;p&gt;&#10;     &#10;      &lt;p&gt;For more details see &lt;code&gt;BeanUtilsBean&lt;code&gt;.&lt;p&gt;&#10;     &#10;      @param bean JavaBean whose properties are being populated&#10;      @param properties Map keyed by property name, with the&#10;       corresponding (String or String[]) value(s) to be set" />
      <item value="in progress" />
      <item value="progress" />
      <item value="Shifts" />
      <item value=" Inserts all of the elements in the specified collection into this&#10;      list at the specified position (optional operation).  Shifts the&#10;      element currently at that position (if any) and any subsequent&#10;      elements to the right (increases their indices).  The new elements&#10;      will appear in this list in the order that they are returned by the&#10;      specified collection's iterator.  The behavior of this operation is&#10;      undefined if the specified collection is modified while the&#10;      operation is in progress.  (Note that this will occur if the specified&#10;      collection is this list, and it's nonempty.)" />
      <item value="provider" />
      <item value="Incompatible Class Change Error" />
      <item value="  &amp;64;SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that&#10;  statements in your method body declare they generate.&#10;  &lt;p&gt;&#10;  &amp;64;SneakyThrow does not silently swallow, wrap into RuntimeException, or otherwise modify any exceptions of the listed&#10;  checked exception types. The JVM does not check for the consistency of the checked exception system; javac does,&#10;  and this annotation lets you opt out of its mechanism.&#10;  &lt;p&gt;&#10;  Complete documentation is found at &lt;a href=&quot;https:projectlombok.orgfeaturesSneakyThrows&quot;&gt;the project lombok features page for &amp;64;SneakyThrows&lt;a&gt;.&#10;  &lt;p&gt;&#10;  Example:" />
      <item value="decorate" />
      <item value="      &lt;p&gt;This method eliminates the need for explicit range operations (of&#10;      the sort that commonly exist for arrays).  Any operation that expects&#10;      a list can be used as a range operation by passing a subList view&#10;      instead of a whole list.  For example, the following idiom&#10;      removes a range of elements from a list:&#10;      &lt;pre&gt;&#10;           list.subList(from, to).clear();&#10;      &lt;pre&gt;&#10;      Similar idioms may be constructed for {@link indexOf(Object)} and&#10;      {@link lastIndexOf(Object)}, and all of the algorithms in the&#10;      {@link Collections} class can be applied to a subList.&#10;     &#10;      &lt;p&gt;The semantics of the list returned by this method become undefined if&#10;      the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;i&gt; in&#10;      any way other than via the returned list.  (Structural modifications are&#10;      those that change the size of this list, or otherwise perturb it in such&#10;      a fashion that iterations in progress may yield incorrect results.)" />
      <item value="相似度" />
      <item value="multiply" />
      <item value="continute Alarm" />
      <item value="ceil" />
      <item value="      Returns a {@code BigDecimal} whose value is {@code (this &#10;      divisor)}, and whose scale is as specified.  If rounding must&#10;      be performed to generate a result with the specified scale, the&#10;      specified rounding mode is applied.&#10;     &#10;      @deprecated The method {@link divide(BigDecimal, int, RoundingMode)}&#10;      should be used in preference to this legacy method." />
      <item value="      @param o1 the first object to be compared.&#10;      @param o2 the second object to be compared.&#10;      @return a negative integer, zero, or a positive integer as the&#10;              first argument is less than, equal to, or greater than the&#10;              second." />
      <item value="report" />
      <item value="because" />
      <item value="cause" />
      <item value="  Generic {@link org.apache.kafka.common.serialization.Serializer Serializer} for sending&#10;  Java objects to Kafka as JSON.&#10;  &lt;p&gt;&#10;  IMPORTANT: Configuration must be done completely with property setters or via&#10;  {@link configure(Map, boolean)}, not a mixture. If any setters have been called,&#10;  {@link configure(Map, boolean)} will be a no-op.&#10; &#10;  @param &lt;T&gt; class of the entity, representing messages" />
      <item value="java.sql.SQLException: Cannot change read-only flag after establishing a connection. Use SQLiteConfigsetReadOnly and SQLiteConfig.createConnection()." />
      <item value="    &#10;      Updates interface network statistics on this interface. Statistics include&#10;      packets and bytes sent and received, and interface speed.&#10;     &#10;      @return {@code true} if the update was successful, {@code false} otherwise.&#10;     " />
      <item value="      Instantiates a list of {@link LogicalVolumeGroup} objects, representing a&#10;      storage pool or group of devices, partitions, volumes, or other&#10;      implementation specific means of file storage.&#10;      &lt;p&gt;&#10;      If not yet implemented or if logical volume groups do not exist, returns an&#10;      empty list.&#10;      &lt;p&gt;&#10;      Currently implemented for Linux (LVM2), macOS (Core Storage), and Windows&#10;      (Storage Spaces).&#10;     &#10;      @return A list of {@link LogicalVolumeGroup} objects or an empty list if none&#10;              are present." />
      <item value="      Gets a list of non-local {@link NetworkIF} objects, representing a network&#10;      interface. The list excludes local interfaces.&#10;     &#10;      @return A list of {@link NetworkIF} objects representing the interfaces" />
      <item value="      Gets a list {@link NetworkIF} objects, representing a network interface.&#10;     &#10;      @param includeLocalInterfaces&#10;                 whether to include local interfaces (loopback or no hardware&#10;                 address) in the result&#10;      @return A list of {@link NetworkIF} objects representing the interfaces" />
      <item value="      Instantiates a {@link oshi.hardware.Sensors} object, representing CPU&#10;      temperature and fan speed.&#10;     &#10;      @return A Sensors object" />
      <item value="      Instantiates a list of {@link oshi.hardware.SoundCard} objects, representing&#10;      the Sound cards.&#10;     &#10;      @return A list of SoundCard objects or an empty list if none are present." />
      <item value="      Retrieves the Video RAM (VRAM) available on the GPU&#10;     &#10;      @return Total number of bytes." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1665991082147" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>