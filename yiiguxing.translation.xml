<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="582" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="capture" />
      <item value="orginal" />
      <item value="Compatible Service" />
      <item value="read From Source When No Replicas Original" />
      <item value="enumerate String Properties" />
      <item value="prevails" />
      <item value="get Exact File Name" />
      <item value="has Successed" />
      <item value="the identity value for the accumulating function" />
      <item value="task Progress Probe" />
      <item value="get And Decrement" />
      <item value="accumulate" />
      <item value="accumulate And Get" />
      <item value="Signal Chart Service" />
      <item value="remove Inactive Tasks" />
      <item value="Signal Chart Controller" />
      <item value="DASHBOARD" />
      <item value="assign Table Alias" />
      <item value="extra Dataset Id" />
      <item value="fit Page Size" />
      <item value="Page" />
      <item value="    &#10;      Performs the given action for each remaining element until all elements&#10;      have been processed or the action throws an exception.  Actions are&#10;      performed in the order of iteration, if that order is specified.&#10;      Exceptions thrown by the action are relayed to the caller.&#10;      &lt;p&gt;&#10;      The behavior of an iterator is unspecified if the action modifies the&#10;      collection in any way (even by calling the {@link remove remove} method&#10;      or other mutator methods of {@code Iterator} subtypes),&#10;      unless an overriding class has specified a concurrent modification policy.&#10;      &lt;p&gt;&#10;      Subsequent behavior of an iterator is unspecified if the action throws an&#10;      exception.&#10;     &#10;      @implSpec&#10;      &lt;p&gt;The default implementation behaves as if:&#10;      &lt;pre&gt;{@code&#10;          while (hasNext())&#10;              action.accept(next());&#10;      }&lt;pre&gt;&#10;     " />
      <item value="     Inserts the specified element at the specified position in this list&#10;      (optional operation).  Shifts the element currently at that position&#10;      (if any) and any subsequent elements to the right (adds one to their&#10;      indices).&#10;     &#10;      @param index index at which the specified element is to be inserted&#10;      @param element element to be inserted&#10;      @throws UnsupportedOperationException if the {@code add} operation&#10;              is not supported by this list&#10;      @throws ClassCastException if the class of the specified element&#10;              prevents it from being added to this list&#10;      @throws NullPointerException if the specified element is null and&#10;              this list does not permit null elements&#10;      @throws IllegalArgumentException if some property of the specified&#10;              element prevents it from being added to this list&#10;      @throws IndexOutOfBoundsException if the index is out of range&#10;              ({@code index &lt; 0 || index &gt; size()})" />
      <item value="orig Column Indexs" />
      <item value="orign" />
      <item value="tranform Value" />
      <item value="volatile" />
      <item value="get Request Column Restrict Name" />
      <item value="metadata Complex" />
      <item value="Sync Export Task" />
      <item value="Config" />
      <item value="MD Common Constants" />
      <item value="Delete Outlined" />
      <item value="Caret Right Outlined" />
      <item value="Area Chart Outlined" />
      <item value="      Deletes the file or directory denoted by this abstract pathname.  If&#10;      this pathname denotes a directory, then the directory must be empty in&#10;      order to be deleted.&#10;     &#10;      &lt;p&gt; Note that the {@link java.nio.file.Files} class defines the {@link&#10;      java.nio.file.Filesdelete(Path) delete} method to throw an {@link IOException}&#10;      when a file cannot be deleted. This is useful for error reporting and to&#10;      diagnose why a file cannot be deleted.&#10;     &#10;      @return  &lt;code&gt;true&lt;code&gt; if and only if the file or directory is&#10;               successfully deleted; &lt;code&gt;false&lt;code&gt; otherwise&#10;     &#10;      @throws  SecurityException&#10;               If a security manager exists and its {@link&#10;               java.lang.SecurityManagercheckDelete} method denies&#10;               delete access to the file" />
      <item value="  Implementation of {@link ParameterNameDiscoverer} that uses the LocalVariableTable&#10;  information in the method attributes to discover parameter names. Returns&#10;  {@code null} if the class file was compiled without debug information.&#10; &#10;  &lt;p&gt;Uses ObjectWeb's ASM library for analyzing class files. Each discoverer instance&#10;  caches the ASM discovered information for each introspected Class, in a thread-safe&#10;  manner. It is recommended to reuse ParameterNameDiscoverer instances as far as possible." />
      <item value="Primitive Class" />
      <item value="  {@code InvocationHandler} is the interface implemented by&#10;  the &lt;i&gt;invocation handler&lt;i&gt; of a proxy instance.&#10; &#10;  &lt;p&gt;Each proxy instance has an associated invocation handler.&#10;  When a method is invoked on a proxy instance, the method&#10;  invocation is encoded and dispatched to the {@code invoke}&#10;  method of its invocation handler.&#10; " />
      <item value="      Determines if the specified {@code Object} is assignment-compatible&#10;      with the object represented by this {@code Class}.  This method is&#10;      the dynamic equivalent of the Java language {@code instanceof}&#10;      operator. The method returns {@code true} if the specified&#10;      {@code Object} argument is non-null and can be cast to the&#10;      reference type represented by this {@code Class} object without&#10;      raising a {@code ClassCastException.} It returns {@code false}&#10;      otherwise.&#10;     &#10;      &lt;p&gt; Specifically, if this {@code Class} object represents a&#10;      declared class, this method returns {@code true} if the specified&#10;      {@code Object} argument is an instance of the represented class (or&#10;      of any of its subclasses); it returns {@code false} otherwise. If&#10;      this {@code Class} object represents an array class, this method&#10;      returns {@code true} if the specified {@code Object} argument&#10;      can be converted to an object of the array class by an identity&#10;      conversion or by a widening reference conversion; it returns&#10;      {@code false} otherwise. If this {@code Class} object&#10;      represents an interface, this method returns {@code true} if the&#10;      class or any superclass of the specified {@code Object} argument&#10;      implements this interface; it returns {@code false} otherwise. If&#10;      this {@code Class} object represents a primitive type, this method&#10;      returns {@code false}.&#10;     &#10;      @param   obj the object to check&#10;      @return  true if {@code obj} is an instance of this class" />
      <item value="      Clears any data that exists in the buffer as well as the status code and&#10;      headers. If the response has been committed, this method throws an&#10;      &lt;code&gt;IllegalStateException&lt;code&gt;." />
      <item value="      Wait for {@code timeout} duration for this promise's value to be deliver.&#10;     &#10;      @param timeout the timeout&#10;      @param unit    time unit for the timeout&#10;     &#10;      @return the value&#10;     &#10;      @throws T in case another thread informs the promise of an error meanwhile, or the timeout expires" />
      <item value="  Represents promised data of the parameterized type {@code V} and allows waiting on it. An exception may also be&#10;  delivered to a waiter, and will be of the parameterized type {@code T}.&#10;  &lt;p&gt;&#10;  For atomic operations on a promise, e.g. checking if a value is delivered and if it is not then setting it, the&#10;  associated lock for the promise should be acquired while doing so." />
      <item value="      Await this event to have a definite {@code true} or {@code false} value, for {@code timeout} duration.&#10;     &#10;      @param timeout timeout&#10;      @param unit    the time unit for the timeout&#10;     &#10;      @throws T if another thread meanwhile informs this event of an error, or timeout expires" />
      <item value="We expect to receive channel open confirmationrejection and want to be able to next this packet." />
      <item value="violently" />
      <item value="Direct channels are those that are initiated by us." />
      <item value="  A channel is the basic medium for application-layer data on top of an SSH transport." />
      <item value="transport-layer" />
      <item value="Transport Exception" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1681095514707" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>