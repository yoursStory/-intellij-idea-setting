<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="582" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="metadata Complex" />
      <item value="Sync Export Task" />
      <item value="Config" />
      <item value="MD Common Constants" />
      <item value="Delete Outlined" />
      <item value="Caret Right Outlined" />
      <item value="Area Chart Outlined" />
      <item value="      Deletes the file or directory denoted by this abstract pathname.  If&#10;      this pathname denotes a directory, then the directory must be empty in&#10;      order to be deleted.&#10;     &#10;      &lt;p&gt; Note that the {@link java.nio.file.Files} class defines the {@link&#10;      java.nio.file.Filesdelete(Path) delete} method to throw an {@link IOException}&#10;      when a file cannot be deleted. This is useful for error reporting and to&#10;      diagnose why a file cannot be deleted.&#10;     &#10;      @return  &lt;code&gt;true&lt;code&gt; if and only if the file or directory is&#10;               successfully deleted; &lt;code&gt;false&lt;code&gt; otherwise&#10;     &#10;      @throws  SecurityException&#10;               If a security manager exists and its {@link&#10;               java.lang.SecurityManagercheckDelete} method denies&#10;               delete access to the file" />
      <item value="  Implementation of {@link ParameterNameDiscoverer} that uses the LocalVariableTable&#10;  information in the method attributes to discover parameter names. Returns&#10;  {@code null} if the class file was compiled without debug information.&#10; &#10;  &lt;p&gt;Uses ObjectWeb's ASM library for analyzing class files. Each discoverer instance&#10;  caches the ASM discovered information for each introspected Class, in a thread-safe&#10;  manner. It is recommended to reuse ParameterNameDiscoverer instances as far as possible." />
      <item value="Primitive Class" />
      <item value="  {@code InvocationHandler} is the interface implemented by&#10;  the &lt;i&gt;invocation handler&lt;i&gt; of a proxy instance.&#10; &#10;  &lt;p&gt;Each proxy instance has an associated invocation handler.&#10;  When a method is invoked on a proxy instance, the method&#10;  invocation is encoded and dispatched to the {@code invoke}&#10;  method of its invocation handler.&#10; " />
      <item value="      Determines if the specified {@code Object} is assignment-compatible&#10;      with the object represented by this {@code Class}.  This method is&#10;      the dynamic equivalent of the Java language {@code instanceof}&#10;      operator. The method returns {@code true} if the specified&#10;      {@code Object} argument is non-null and can be cast to the&#10;      reference type represented by this {@code Class} object without&#10;      raising a {@code ClassCastException.} It returns {@code false}&#10;      otherwise.&#10;     &#10;      &lt;p&gt; Specifically, if this {@code Class} object represents a&#10;      declared class, this method returns {@code true} if the specified&#10;      {@code Object} argument is an instance of the represented class (or&#10;      of any of its subclasses); it returns {@code false} otherwise. If&#10;      this {@code Class} object represents an array class, this method&#10;      returns {@code true} if the specified {@code Object} argument&#10;      can be converted to an object of the array class by an identity&#10;      conversion or by a widening reference conversion; it returns&#10;      {@code false} otherwise. If this {@code Class} object&#10;      represents an interface, this method returns {@code true} if the&#10;      class or any superclass of the specified {@code Object} argument&#10;      implements this interface; it returns {@code false} otherwise. If&#10;      this {@code Class} object represents a primitive type, this method&#10;      returns {@code false}.&#10;     &#10;      @param   obj the object to check&#10;      @return  true if {@code obj} is an instance of this class" />
      <item value="      Clears any data that exists in the buffer as well as the status code and&#10;      headers. If the response has been committed, this method throws an&#10;      &lt;code&gt;IllegalStateException&lt;code&gt;." />
      <item value="      Wait for {@code timeout} duration for this promise's value to be deliver.&#10;     &#10;      @param timeout the timeout&#10;      @param unit    time unit for the timeout&#10;     &#10;      @return the value&#10;     &#10;      @throws T in case another thread informs the promise of an error meanwhile, or the timeout expires" />
      <item value="  Represents promised data of the parameterized type {@code V} and allows waiting on it. An exception may also be&#10;  delivered to a waiter, and will be of the parameterized type {@code T}.&#10;  &lt;p&gt;&#10;  For atomic operations on a promise, e.g. checking if a value is delivered and if it is not then setting it, the&#10;  associated lock for the promise should be acquired while doing so." />
      <item value="      Await this event to have a definite {@code true} or {@code false} value, for {@code timeout} duration.&#10;     &#10;      @param timeout timeout&#10;      @param unit    the time unit for the timeout&#10;     &#10;      @throws T if another thread meanwhile informs this event of an error, or timeout expires" />
      <item value="We expect to receive channel open confirmationrejection and want to be able to next this packet." />
      <item value="violently" />
      <item value="Direct channels are those that are initiated by us." />
      <item value="  A channel is the basic medium for application-layer data on top of an SSH transport." />
      <item value="transport-layer" />
      <item value="Transport Exception" />
      <item value="auth Password" />
      <item value="Exhausted available authentication methods" />
      <item value="adjustment" />
      <item value="used Up" />
      <item value="find Existing Algorithms" />
      <item value="Promiscuous Verifier" />
      <item value="fixed Delay String" />
      <item value="extension" />
      <item value="current Time Millis" />
      <item value="      Gets the value of the specified field from this date-time as a {@code long}.&#10;      &lt;p&gt;&#10;      This queries this date-time for the value of the specified field.&#10;      If it is not possible to return the value, because the field is not supported&#10;      or for some other reason, an exception is thrown.&#10;      &lt;p&gt;&#10;      If the field is a {@link ChronoField} then the query is implemented here.&#10;      The {@link isSupported(TemporalField) supported fields} will return valid&#10;      values based on this date-time.&#10;      All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.&#10;      &lt;p&gt;&#10;      If the field is not a {@code ChronoField}, then the result of this method&#10;      is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}&#10;      passing {@code this} as the argument. Whether the value can be obtained,&#10;      and what the value represents, is determined by the field." />
      <item value="&#9;  Return a {@code Map} with the first values contained in this {@code MultiValueMap}.&#10;&#9;  @return a single value representation of this map" />
      <item value="      Flushes this output stream and forces any buffered output bytes&#10;      to be written out. The general contract of &lt;code&gt;flush&lt;code&gt; is&#10;      that calling it is an indication that, if any bytes previously&#10;      written have been buffered by the implementation of the output&#10;      stream, such bytes should immediately be written to their&#10;      intended destination.&#10;      &lt;p&gt;&#10;      If the intended destination of this stream is an abstraction provided by&#10;      the underlying operating system, for example a file, then flushing the&#10;      stream guarantees only that bytes previously written to the stream are&#10;      passed to the operating system for writing; it does not guarantee that&#10;      they are actually written to a physical device such as a disk drive.&#10;      &lt;p&gt;&#10;      The &lt;code&gt;flush&lt;code&gt; method of &lt;code&gt;OutputStream&lt;code&gt; does nothing." />
      <item value="handle Direct" />
      <item value="Task Progress" />
      <item value="process Report" />
      <item value="Progress" />
      <item value="获取进度" />
      <item value="ceil" />
      <item value="plus" />
      <item value="subtract" />
      <item value="    &#10;      Unit that represents the concept of a microsecond.&#10;      For the ISO calendar system, it is equal to the 1,000,000th part of the second unit.&#10;     " />
      <item value="      Unit that represents the concept of a millisecond.&#10;      For the ISO calendar system, it is equal to the 1000th part of the second unit." />
      <item value="&#9;  Execute the annotated method with a fixed period between the end of the&#10;&#9;  last invocation and the start of the next.&#10;&#9;  &lt;p&gt;The time unit is milliseconds by default but can be overridden via&#10;&#9;  {@link timeUnit}.&#10;&#9;  @return the delay as a String value &amp;mdash; for example, a placeholder&#10;&#9;  or a {@link java.time.Durationparse java.time.Duration} compliant value" />
      <item value="proccess And Save" />
      <item value="task Progress" />
      <item value="probe replay start" />
      <item value="    Sets the file-pointer offset, measured from the beginning of this&#10;      file, at which the next read or write occurs.  The offset may be&#10;      set beyond the end of the file. Setting the offset beyond the end&#10;      of the file does not change the file length.  The file length will&#10;      change only by writing after the offset has been set beyond the end&#10;      of the file.&#10;     &#10;      @param      pos   the offset position, measured in bytes from the&#10;                        beginning of the file, at which to set the file&#10;                        pointer.&#10;      @exception  IOException  if {@code pos} is less than&#10;                               {@code 0} or if an IO error occurs." />
      <item value="QUEUE" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1678669842941" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>