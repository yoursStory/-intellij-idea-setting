<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="2703" />
    <option name="newTranslationDialogY" value="454" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="     Closes this resource, relinquishing any underlying resources.&#10;      This method is invoked automatically on objects managed by the&#10;      {@code try}-with-resources statement.&#10;     &#10;      &lt;p&gt;While this interface method is declared to throw {@code&#10;      Exception}, implementers are &lt;em&gt;strongly&lt;em&gt; encouraged to&#10;      declare concrete implementations of the {@code close} method to&#10;      throw more specific exceptions, or to throw no exception at all&#10;      if the close operation cannot fail.&#10;     &#10;      &lt;p&gt; Cases where the close operation may fail require careful&#10;      attention by implementers. It is strongly advised to relinquish&#10;      the underlying resources and to internally &lt;em&gt;mark&lt;em&gt; the&#10;      resource as closed, prior to throwing the exception. The {@code&#10;      close} method is unlikely to be invoked more than once and so&#10;      this ensures that the resources are released in a timely manner.&#10;      Furthermore it reduces problems that could arise when the resource&#10;      wraps, or is wrapped, by another resource.&#10;     &#10;      &lt;p&gt;&lt;em&gt;Implementers of this interface are also strongly advised&#10;      to not have the {@code close} method throw {@link&#10;      InterruptedException}.&lt;em&gt;&#10;     &#10;      This exception interacts with a thread's interrupted status,&#10;      and runtime misbehavior is likely to occur if an {@code&#10;      InterruptedException} is {@linkplain ThrowableaddSuppressed&#10;      suppressed}.&#10;     &#10;      More generally, if it would cause problems for an&#10;      exception to be suppressed, the {@code AutoCloseable.close}&#10;      method should not throw it.&#10;     &#10;      &lt;p&gt;Note that unlike the {@link java.io.Closeableclose close}&#10;      method of {@link java.io.Closeable}, this {@code close} method&#10;      is &lt;em&gt;not&lt;em&gt; required to be idempotent.  In other words,&#10;      calling this {@code close} method more than once may have some&#10;      visible side effect, unlike {@code Closeable.close} which is&#10;      required to have no effect if called more than once.&#10;     &#10;      However, implementers of this interface are strongly encouraged&#10;      to make their {@code close} methods idempotent." />
      <item value="relinquishing" />
      <item value="  &lt;p&gt;It is possible, and in fact common, for a base class to&#10;  implement AutoCloseable even though not all of its subclasses or&#10;  instances will hold releasable resources.  For code that must operate&#10;  in complete generality, or when it is known that the {@code AutoCloseable}&#10;  instance requires resource release, it is recommended to use {@code&#10;  try}-with-resources constructions. However, when using facilities such as&#10;  {@link java.util.stream.Stream} that support both IO-based and&#10;  non-IO-based forms, {@code try}-with-resources blocks are in&#10;  general unnecessary when using non-IO-based forms." />
      <item value="  implement AutoCloseable even though not all of its subclasses or&#10;  instances will hold releasable resources.  For code that must operate&#10;  in complete generality, or when it is known that the {@code AutoCloseable}" />
      <item value="It is possible, and in fact common, for a base class to&#10;  implement AutoCloseable even though not all of its subclasses or&#10;  instances will hold releasable resources.  For code that must operate&#10;  in complete generality, or when it is known that the {@code AutoCloseable}&#10;  instance requires resource release, it is recommended to use {@code&#10;  try}-with-resources constructions. However, when using facilities such as&#10;  {@link java.util.stream.Stream} that support both IO-based and&#10;  non-IO-based forms, {@code try}-with-resources blocks are in&#10;  general unnecessary when using non-IO-based forms." />
      <item value="exhaustion" />
      <item value="avoiding" />
      <item value=" try}-with-resources block for which the object has been declared in&#10;  the resource specification header. This construction ensures prompt&#10;  release, avoiding resource exhaustion exceptions and errors that&#10;  may otherwise occur." />
      <item value="cascading" />
      <item value="IMPLICIT" />
      <item value="&#9;  If the annotation using {@code ExecutableType} is on a type (class or interface),&#10;&#9;  the behavior is equivalent to the annotation not being present." />
      <item value="agnostic" />
      <item value="ALL Combine Validators" />
      <item value="exclusions" />
      <item value="simultaneou" />
      <item value="Too many simultaneous queries" />
      <item value="simultaneous" />
      <item value="Convertor" />
      <item value="convertor" />
      <item value="parent tbl id" />
      <item value="Algorithm" />
      <item value="extAlgorithm" />
      <item value="cascade" />
      <item value="quota" />
      <item value="Column Type Convertor" />
      <item value="is Exist Updateable" />
      <item value="is Exist Configable" />
      <item value=" maximum number of fractional digits accepted for this number" />
      <item value="Digits" />
      <item value="negative" />
      <item value="statistical Size" />
      <item value="Mutation Plan" />
      <item value="combine" />
      <item value="side-effect" />
      <item value="On first setup, you may need to run ` mvn install -DskipTests`&#10;to install the local jars. This is a side-effect of multi-module maven projects" />
      <item value=" The most common stream of tokens where every token is buffered up&#10;   and tokens are filtered for a certain channel (the parser will only&#10;   see these tokens).&#10; &#10;   Even though it buffers all of the tokens, this token stream pulls tokens&#10;   from the tokens source on demand. In other words, until you ask for a&#10;   token using consume(), LT(), etc. the stream does not pull from the lexer.&#10; &#10;   The only difference between this stream and BufferedTokenStream superclass&#10;   is that this stream knows how to ignore off channel tokens. There may be&#10;   a performance advantage to using the superclass if you don't pass&#10;   whitespace and comments etc. to the parser on a hidden channel (i.e.,&#10;   you set channel instead of calling skip() in lexer rules.)" />
      <item value="coprocessor" />
      <item value=" Starts up a self-contained HBase cluster with Phoenix installed to allow simple local&#10;  testing of Phoenix." />
      <item value="  Test rule that prevents System.exit  JVM exit to error out the test runner, which manages&#10;  JVM and providing test output files, and instead throw valid Exception to handle JVM exit&#10;  gracefully" />
      <item value="  Annotates static fields that reference rules or methods that return them. A field must be public,&#10;  static, and a subtype of {@link org.junit.rules.TestRule}.  A method must be public static, and return&#10;  a subtype of {@link org.junit.rules.TestRule}.&#10;  &lt;p&gt;&#10;  The {@link org.junit.runners.model.Statement} passed&#10;  to the {@link org.junit.rules.TestRule} will run any {@link BeforeClass} methods,&#10;  then the entire body of the test class (all contained methods, if it is&#10;  a standard JUnit test class, or all contained classes, if it is a&#10;  {@link org.junit.runners.Suite}), and finally any {@link AfterClass} methods.&#10;  &lt;p&gt;&#10;  The statement passed to the {@link org.junit.rules.TestRule} will never throw an exception,&#10;  and throwing an exception from the {@link org.junit.rules.TestRule} will result in undefined&#10;  behavior.  This means that some {@link org.junit.rules.TestRule}s, such as" />
      <item value="  For pre-0.94.9 instances, this class tests correctly deserializing WALEdits wo compression. Post&#10;  0.94.9 we can support a custom  {@link WALCellCodec} which handles readingwriting the compressed&#10;  edits.&#10;  &lt;p&gt;&#10;  Most of the underlying work (creatingsplitting the WAL, etc) is from&#10;  org.apache.hadoop.hhbase.regionserver.wal.TestWALReplay, copied here for completeness and ease of&#10;  use.&#10;  &lt;p&gt;&#10;  This test should only have a single test - otherwise we will startstop the minicluster multiple&#10;  times, which is probably not what you want to do (mostly because its so much effort)." />
      <item value="Immutable Map" />
      <item value="Enumerable Property Source" />
      <item value="Composite Property Source" />
      <item value="  Composite {@link PropertySource} implementation that iterates over a set of&#10;  {@link PropertySource} instances. Necessary in cases where multiple property sources&#10;  share the same name, e.g. when multiple values are supplied to {@code @PropertySource}.&#10; &#10;  &lt;p&gt;As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead&#10;  of plain {@link PropertySource}, exposing {@link getPropertyNames()} based on the&#10;  accumulated property names from all contained sources (as far as possible)." />
      <item value="  {@link BeanFactoryPostProcessor} used for bootstrapping processing of&#10;  {@link Configuration @Configuration} classes.&#10; &#10;  &lt;p&gt;Registered by default when using {@code &lt;context:annotation-config&gt;} or&#10;  {@code &lt;context:component-scan&gt;}. Otherwise, may be declared manually as&#10;  with any other {@link BeanFactoryPostProcessor}.&#10; &#10;  &lt;p&gt;This post processor is priority-ordered as it is important that any&#10;  {@link Bean @Bean} methods declared in {@code @Configuration} classes have&#10;  their corresponding bean definitions registered before any other&#10;  {@code BeanFactoryPostProcessor} executes." />
      <item value="elapsed" />
      <item value="combination" />
      <item value="  {@link org.springframework.context.MessageSource} implementation that&#10;  accesses resource bundles using specified basenames. This class relies&#10;  on the underlying JDK's {@link java.util.ResourceBundle} implementation,&#10;  in combination with the JDK's standard message parsing provided by&#10;  {@link java.text.MessageFormat}.&#10; &#10;  &lt;p&gt;This MessageSource caches both the accessed ResourceBundle instances and&#10;  the generated MessageFormats for each message. It also implements rendering of&#10;  no-arg messages without MessageFormat, as supported by the AbstractMessageSource&#10;  base class. The caching provided by this MessageSource is significantly faster&#10;  than the built-in caching of the {@code java.util.ResourceBundle} class.&#10; &#10;  &lt;p&gt;The basenames follow {@link java.util.ResourceBundle} conventions: essentially,&#10;  a fully-qualified classpath location. If it doesn't contain a package qualifier&#10;  (such as {@code org.mypackage}), it will be resolved from the classpath root.&#10;  Note that the JDK's standard ResourceBundle treats dots as package separators:&#10;  This means that &quot;test.theme&quot; is effectively equivalent to &quot;testtheme&quot;.&#10; &#10;  &lt;p&gt;On the classpath, bundle resources will be read with the locally configured&#10;  {@link setDefaultEncoding encoding}: by default, ISO-8859-1; consider switching&#10;  this to UTF-8, or to {@code null} for the platform default encoding. On the JDK 9+&#10;  module path where locally provided {@code ResourceBundle.Control} handles are not&#10;  supported, this MessageSource always falls back to {@link ResourceBundlegetBundle}&#10;  retrieval with the platform default encoding: UTF-8 with a ISO-8859-1 fallback on&#10;  JDK 9+ (configurable through the &quot;java.util.PropertyResourceBundle.encoding&quot; system&#10;  property). Note that {@link loadBundle(Reader)}{@link loadBundle(InputStream)}&#10;  won't be called in this case either, effectively ignoring overrides in subclasses.&#10;  Consider implementing a JDK 9 {@code java.util.spi.ResourceBundleProvider} instead." />
      <item value="Resource Bundle" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1668074231743" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>