<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="586" />
    <option name="newTranslationDialogX" value="2783" />
    <option name="newTranslationDialogY" value="225" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="转换器&#10;" />
      <item value="Cfg Edge Probe Convertor" />
      <item value="Porbe" />
      <item value="Convertor" />
      <item value="convertor" />
      <item value="convertor&#10;" />
      <item value="maximum number of fractional digits accepted for this number" />
      <item value="maximum number of integral digits accepted for this number" />
      <item value="Nacos Registration" />
      <item value="并行" />
      <item value="prepare Middle Table" />
      <item value="create" />
      <item value="creat" />
      <item value="Table" />
      <item value="Origin" />
      <item value="relative" />
      <item value="fixed Rate" />
      <item value="Ratio&#9;" />
      <item value="环比同比&#10;" />
      <item value="环比同比&#10;&#10;" />
      <item value="环比&#10;" />
      <item value="环比" />
      <item value="hr" />
      <item value="环比指标" />
      <item value="transform" />
      <item value="export" />
      <item value="  Annotation used at the field or methodconstructor parameter level&#10;  that indicates a default value expression for the annotated element.&#10; &#10;  &lt;p&gt;Typically used for expression-driven or property-driven dependency injection.&#10;  Also supported for dynamic resolution of handler method arguments &amp;mdash; for&#10;  example, in Spring MVC.&#10; &#10;  &lt;p&gt;A common use case is to inject values using&#10;  &lt;code&gt;{systemProperties.myProp}&lt;code&gt; style SpEL (Spring Expression Language)&#10;  expressions. Alternatively, values may be injected using&#10;  &lt;code&gt;{my.app.myProp}&lt;code&gt; style property placeholders.&#10; &#10;  &lt;p&gt;Note that actual processing of the {@code @Value} annotation is performed&#10;  by a {@link org.springframework.beans.factory.config.BeanPostProcessor&#10;  BeanPostProcessor} which in turn means that you &lt;em&gt;cannot&lt;em&gt; use&#10;  {@code @Value} within&#10;  {@link org.springframework.beans.factory.config.BeanPostProcessor&#10;  BeanPostProcessor} or&#10;  {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor}&#10;  types. Please consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}&#10;  class (which, by default, checks for the presence of this annotation)." />
      <item value="send Trap" />
      <item value="indicators" />
      <item value="event period" />
      <item value="  Marker annotation that indicates that the logical property that&#10;  the accessor (field, gettersetter method or Creator parameter&#10;  [of {@link JsonCreator}-annotated constructor or factory method])&#10;  is to be ignored by introspection-based&#10;  serialization and deserialization functionality.&#10; &lt;p&gt;&#10;  Annotation only needs to be added to one of the accessors (often&#10;  getter method, but may be setter, field or creator parameter),&#10;  if the complete removal of the property is desired.&#10;  However: if only particular accessor is to be ignored (for example,&#10;  when ignoring one of potentially conflicting setter methods),&#10;  this can be done by annotating other not-to-be-ignored accessors&#10;  with {@link JsonProperty} (or its equivalents). This is considered&#10;  so-called &quot;split property&quot; case and allows definitions of&#10;  &quot;read-only&quot; (read from input into POJO) and &quot;write-only&quot; (write&#10;  in output but ignore on output)&#10; &lt;br&gt;&#10;  NOTE! As Jackson 2.6, there is a new and improved way to define&#10;  `read-only` and `write-only` properties, using&#10;  {@link JsonPropertyaccess()} annotation: this is recommended over&#10;  use of separate &lt;code&gt;JsonIgnore&lt;code&gt; and {@link JsonProperty}&#10;  annotations.&#10; &lt;p&gt;&#10;  For example, a &quot;getter&quot; method that would otherwise denote&#10;  a property (like, say, &quot;getValue&quot; to suggest property &quot;value&quot;)&#10;  to serialize, would be ignored and no such property would&#10;  be output unless another annotation defines alternative method to use.&#10; &lt;p&gt;&#10;  When ignoring the whole property, the default behavior if encountering&#10;  such property in input is to ignore it without exception; but if there&#10;  is a {@link JsonAnySetter} it will be called instead. Either way,&#10;  no exception will be thrown.&#10; &lt;p&gt;&#10;  Annotation is usually used just a like a marker annotation, that&#10;  is, without explicitly defining 'value' argument (which defaults&#10;  to &lt;code&gt;true&lt;code&gt;): but argument can be explicitly defined.&#10;  This can be done to override an existing `JsonIgnore` by explicitly&#10;  defining one with 'false' argument: either in a sub-class, or by&#10;  using &quot;mix-in annotations&quot;." />
      <item value="A string composed of this string repeated&#10;               {@code count} times or the empty string if this&#10;               string is empty or count is zero" />
      <item value="      Returns a string whose value is the concatenation of this&#10;      string repeated {@code count} times.&#10;      &lt;p&gt;&#10;      If this string is empty or count is zero then the empty&#10;      string is returned." />
      <item value="DELAY MICROSECOND" />
      <item value="DELAY MILLISECOND" />
      <item value="title Suffer" />
      <item value="dest Data Unit" />
      <item value="flip" />
      <item value="mulit Ids" />
      <item value="Mulit" />
      <item value="get Mulit Dataset Vo" />
      <item value="Muli" />
      <item value="      Returns an {@code UnmodifiableList} of the CPU's physical processors. The&#10;      list will be sorted in order of increasing core ID.&#10;     &#10;      @return An {@code UnmodifiabeList} of physical processors." />
      <item value="the number of logical processors, which corresponds to the number&#10;                 of lines to read from the file." />
      <item value="caveats" />
      <item value="caveate" />
      <item value="cave" />
      <item value="interchangeable" />
      <item value="interchange" />
      <item value="inter" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1675320313559" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>