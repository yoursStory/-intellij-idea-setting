<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="incorrectly" />
      <item value="check Table Ref" />
      <item value="ext Algorithm" />
      <item value="assembly" />
      <item value="malformed" />
      <item value="threaten" />
      <item value="It is highly recommended to fix these problems because they threaten the stability of your build." />
      <item value="kept" />
      <item value="is Ext Algorithm" />
      <item value="phase" />
      <item value="terminater" />
      <item value="surefire" />
      <item value="Hamcrest" />
      <item value="Under consideration, prevent affecting core tables" />
      <item value="obtain" />
      <item value="Communications Exception" />
      <item value="introspect" />
      <item value="Disposable Bean" />
      <item value="Smart Initializing Singleton" />
      <item value="&#9;  Invoked right at the end of the singleton pre-instantiation phase,&#10;&#9;  with a guarantee that all regular singleton beans have been created&#10;&#9;  already. {@link ListableBeanFactorygetBeansOfType} calls within&#10;&#9;  this method won't trigger accidental side effects during bootstrap.&#10;&#9;  &lt;p&gt;&lt;b&gt;NOTE:&lt;b&gt; This callback won't be triggered for singleton beans&#10;&#9;  lazily initialized on demand after {@link BeanFactory} bootstrap,&#10;&#9;  and not for any other bean scope either. Carefully use it for beans&#10;&#9;  with the intended bootstrap semantics only." />
      <item value="Thread starvation or clock leap detected" />
      <item value="starvation" />
      <item value="capacity" />
      <item value="      Flips this buffer.  The limit is set to the current position and then&#10;      the position is set to zero.  If the mark is defined then it is&#10;      discarded.&#10;     &#10;      &lt;p&gt; After a sequence of channel-read or &lt;i&gt;put&lt;i&gt; operations, invoke&#10;      this method to prepare for a sequence of channel-write or relative&#10;      &lt;i&gt;get&lt;i&gt; operations.  For example:&#10;     &#10;      &lt;blockquote&gt;&lt;pre&gt;&#10;      buf.put(magic);     Prepend header&#10;      in.read(buf);       Read data into rest of buffer&#10;      buf.flip();         Flip buffer&#10;      out.write(buf);     Write header + data to channel&lt;pre&gt;&lt;blockquote&gt;&#10;     &#10;      &lt;p&gt; This method is often used in conjunction with the {@link&#10;      java.nio.ByteBuffercompact compact} method when transferring data from&#10;      one place to another.  &lt;p&gt;" />
      <item value="flip" />
      <item value="condition" />
      <item value="select Label Column" />
      <item value="Lable" />
      <item value="assistent" />
      <item value="Batch Insert Or Update" />
      <item value="Batchinsert Or Update" />
      <item value="constant" />
      <item value="constant&#10;" />
      <item value="usage" />
      <item value="Usage" />
      <item value="Useage" />
      <item value="usages" />
      <item value="Immutable List" />
      <item value="registration" />
      <item value="GLUE" />
      <item value="Discard" />
      <item value="hessian" />
      <item value="Circular" />
      <item value="Spring Glue Factory" />
      <item value="enumeration" />
      <item value="  An object that implements the Enumeration interface generates a&#10;  series of elements, one at a time. Successive calls to the&#10;  {@code nextElement} method return successive elements of the&#10;  series.&#10;  &lt;p&gt;&#10;  For example, to print all elements of a {@code Vector&lt;E&gt;} &lt;i&gt;v&lt;i&gt;:&#10;  &lt;pre&gt;&#10;    for (Enumeration&amp;lt;E&amp;gt; e = v.elements(); e.hasMoreElements();)&#10;        System.out.println(e.nextElement());&lt;pre&gt;&#10;  &lt;p&gt;&#10;  Methods are provided to enumerate through the elements of a&#10;  vector, the keys of a hashtable, and the values in a hashtable.&#10;  Enumerations are also used to specify the input streams to a&#10;  {@code SequenceInputStream}.&#10; &#10;  @apiNote&#10;  The functionality of this interface is duplicated by the {@link Iterator}&#10;  interface.  In addition, {@code Iterator} adds an optional remove operation,&#10;  and has shorter method names.  New implementations should consider using&#10;  {@code Iterator} in preference to {@code Enumeration}. It is possible to&#10;  adapt an {@code Enumeration} to an {@code Iterator} by using the" />
      <item value="      Returns a canonical representation for the string object.&#10;      &lt;p&gt;&#10;      A pool of strings, initially empty, is maintained privately by the&#10;      class {@code String}.&#10;      &lt;p&gt;&#10;      When the intern method is invoked, if the pool already contains a&#10;      string equal to this {@code String} object as determined by&#10;      the {@link equals(Object)} method, then the string from the pool is&#10;      returned. Otherwise, this {@code String} object is added to the&#10;      pool and a reference to this {@code String} object is returned.&#10;      &lt;p&gt;&#10;      It follows that for any two strings {@code s} and {@code t},&#10;      {@code s.intern() == t.intern()} is {@code true}&#10;      if and only if {@code s.equals(t)} is {@code true}.&#10;      &lt;p&gt;&#10;      All literal strings and string-valued constant expressions are&#10;      interned. String literals are defined in section 3.10.5 of the&#10;      &lt;cite&gt;The Java&amp;trade; Language Specification&lt;cite&gt;.&#10;     &#10;      @return  a string that has the same contents as this string, but is&#10;               guaranteed to be from a pool of unique strings.&#10;      @jls 3.10.5 String Literals" />
      <item value="      The data provider that support DataSource side Aggregation must implement this method." />
      <item value="      The {@code flatMap()} operation has the effect of applying a one-to-many&#10;      transformation to the elements of the stream, and then flattening the&#10;      resulting elements into a new stream.&#10;     &#10;      &lt;p&gt;&lt;b&gt;Examples.&lt;b&gt;&#10;     &#10;      &lt;p&gt;If {@code orders} is a stream of purchase orders, and each purchase&#10;      order contains a collection of line items, then the following produces a&#10;      stream containing all the line items in all the orders:&#10;      &lt;pre&gt;{@code&#10;          orders.flatMap(order -&gt; order.getLineItems().stream())...&#10;      }&lt;pre&gt;" />
      <item value="      Returns a stream consisting of the results of replacing each element of&#10;      this stream with the contents of a mapped stream produced by applying&#10;      the provided mapping function to each element.  Each mapped stream is&#10;      {@link java.util.stream.BaseStreamclose() closed} after its contents&#10;      have been placed into this stream.  (If a mapped stream is {@code null}&#10;      an empty stream is used, instead.)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1670294982582" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>