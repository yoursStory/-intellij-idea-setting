<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="2703" />
    <option name="newTranslationDialogY" value="454" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Restrict" />
      <item value="Addiation" />
      <item value="set Max Inactive Interval" />
      <item value="  The annotation type {@code java.lang.annotation.Repeatable} is&#10;  used to indicate that the annotation type whose declaration it&#10;  (meta-)annotates is &lt;em&gt;repeatable&lt;em&gt;. The value of&#10;  {@code @Repeatable} indicates the &lt;em&gt;containing annotation&#10;  type&lt;em&gt; for the repeatable annotation type." />
      <item value="  The annotation type {@code java.lang.annotation.Repeatable} is&#10;  used to indicate that the annotation type whose declaration it&#10;  (meta-)annotates is &lt;em&gt;repeatable&lt;em&gt;. The value of&#10;  {@code @Repeatable} indicates the &lt;em&gt;containing annotation&#10;  type&lt;em&gt; for the repeatable annotation type.&#10; &#10;  @since 1.8&#10;  @jls 9.6.3 Repeatable Annotation Types&#10;  @jls 9.7.5 Multiple Annotations of the Same Type" />
      <item value="check Exceed" />
      <item value="is Assignable" />
      <item value="      Determines if the specified {@code Class} object represents a&#10;      primitive type.&#10;     &#10;      &lt;p&gt; There are nine predefined {@code Class} objects to represent&#10;      the eight primitive types and void.  These are created by the Java&#10;      Virtual Machine, and have the same names as the primitive types that&#10;      they represent, namely {@code boolean}, {@code byte},&#10;      {@code char}, {@code short}, {@code int},&#10;      {@code long}, {@code float}, and {@code double}.&#10;     &#10;      &lt;p&gt; These objects may only be accessed via the following public static&#10;      final variables, and are the only {@code Class} objects for which&#10;      this method returns {@code true}." />
      <item value="true if and only if this class represents a primitive type" />
      <item value="is Primitive" />
      <item value="    &lt;p&gt;Checks if one {@code Class} can be assigned to a variable of&#10;      another {@code Class}.&lt;p&gt;&#10;     &#10;      &lt;p&gt;Unlike the {@link ClassisAssignableFrom(java.lang.Class)} method,&#10;      this method takes into account widenings of primitive classes and&#10;      {@code null}s.&lt;p&gt;&#10;     &#10;      &lt;p&gt;Primitive widenings allow an int to be assigned to a long, float or&#10;      double. This method returns the correct result for these cases.&lt;p&gt;&#10;     &#10;      &lt;p&gt;{@code Null} may be assigned to any reference type. This method&#10;      will return {@code true} if {@code null} is passed in and the&#10;      toClass is non-primitive.&lt;p&gt;&#10;     &#10;      &lt;p&gt;Specifically, this method tests whether the type represented by the&#10;      specified {@code Class} parameter can be converted to the type&#10;      represented by this {@code Class} object via an identity conversion&#10;      widening primitive or widening reference conversion. See&#10;      &lt;em&gt;&lt;a href=&quot;http:docs.oracle.comjavasespecs&quot;&gt;The Java Language Specification&lt;a&gt;&lt;em&gt;,&#10;      sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;p&gt;&#10;     &#10;      &lt;p&gt;&lt;strong&gt;Since Lang 3.0,&lt;strong&gt; this method will default behavior for&#10;      calculating assignability between primitive and wrapper types &lt;em&gt;corresponding&#10;      to the running Java version&lt;em&gt;; i.e. autoboxing will be the default&#10;      behavior in VMs running Java versions &amp;gt; 1.5.&lt;p&gt;" />
      <item value="Suffer" />
      <item value="title Suffer" />
      <item value="ALL Combine Validators" />
      <item value="get Current Table Column Restrict Name" />
      <item value="build Value List Prop Condition" />
      <item value="      &lt;p&gt;Abbreviates a String using ellipses. This will turn&#10;      &quot;Now is the time for all good men&quot; into &quot;Now is the time for...&quot;&lt;p&gt;&#10;     " />
      <item value="get Schema" />
      <item value="dimensions" />
      <item value="Dimension" />
      <item value="Query Daas Dimension Table Req" />
      <item value="COLUMN KEY" />
      <item value="unique" />
      <item value="has Unique Object" />
      <item value="nullable Single Result" />
      <item value="discarded" />
      <item value="UNCHALLENGED" />
      <item value="exactly" />
      <item value="      Sets the given catalog name in order to select&#10;      a subspace of this &lt;code&gt;Connection&lt;code&gt; object's database&#10;      in which to work.&#10;      &lt;P&gt;&#10;      If the driver does not support catalogs, it will&#10;      silently ignore this request.&#10;      &lt;p&gt;&#10;      Calling {@code setCatalog} has no effect on previously created or prepared&#10;      {@code Statement} objects. It is implementation defined whether a DBMS&#10;      prepare operation takes place immediately when the {@code Connection}&#10;      method {@code prepareStatement} or {@code prepareCall} is invoked.&#10;      For maximum portability, {@code setCatalog} should be called before a&#10;      {@code Statement} is created or prepared.&#10;     &#10;      @param catalog the name of a catalog (subspace in this&#10;             &lt;code&gt;Connection&lt;code&gt; object's database) in which to work&#10;      @exception SQLException if a database access error occurs&#10;      or this method is called on a closed connection" />
      <item value="      Retrieves this &lt;code&gt;Connection&lt;code&gt; object's current catalog name.&#10;     &#10;      @return the current catalog name or &lt;code&gt;null&lt;code&gt; if there is none&#10;      @exception SQLException if a database access error occurs&#10;      or this method is called on a closed connection" />
      <item value="  Query given SQL to create a prepared statement from SQL and a list of&#10;&#9;  arguments to bind to the query, reading the ResultSet on a per-row basis&#10;&#9;  with a RowCallbackHandler.&#10;&#9;  @param sql the SQL query to execute&#10;&#9;  @param rch a callback that will extract results, one row at a time&#10;&#9;  @param args arguments to bind to the query&#10;&#9;  (leaving it to the PreparedStatement to guess the corresponding SQL type);&#10;&#9;  may also contain {@link SqlParameterValue} objects which indicate not&#10;&#9;  only the argument value but also the SQL type and optionally the scale&#10;&#9;  @throws DataAccessException if the query fails" />
      <item value="      Returns an immutable list consisting of {@code n} copies of the&#10;      specified object.  The newly allocated data object is tiny (it contains&#10;      a single reference to the data object).  This method is useful in&#10;      combination with the {@code List.addAll} method to grow lists.&#10;      The returned list is serializable." />
      <item value="table Columns" />
      <item value="      Attempts to establish a connection to the given database URL.&#10;      The &lt;code&gt;DriverManager&lt;code&gt; attempts to select an appropriate driver from&#10;      the set of registered JDBC drivers.&#10;     &#10;      @param url a database url of the form&#10;       &lt;code&gt; jdbc:&lt;em&gt;subprotocol&lt;em&gt;:&lt;em&gt;subname&lt;em&gt;&lt;code&gt;&#10;      @return a connection to the URL&#10;      @exception SQLException if a database access error occurs or the url is&#10;      {@code null}&#10;      @throws SQLTimeoutException  when the driver has determined that the&#10;      timeout value specified by the {@code setLoginTimeout} method&#10;      has been exceeded and has at least tried to cancel the&#10;      current database connection attempt" />
      <item value="HOUR" />
      <item value="get Column" />
      <item value="close Quietly" />
      <item value="primitive Type To Wrapper Map" />
      <item value="particle" />
      <item value="particle Size" />
      <item value="a table name pattern; must match the&#10;             table name as it is stored in the database" />
      <item value="      Retrieves a description of the tables available in the given catalog.&#10;      Only table descriptions matching the catalog, schema, table&#10;      name and type criteria are returned.  They are ordered by&#10;      &lt;code&gt;TABLE_TYPE&lt;code&gt;, &lt;code&gt;TABLE_CAT&lt;code&gt;,&#10;      &lt;code&gt;TABLE_SCHEM&lt;code&gt; and &lt;code&gt;TABLE_NAME&lt;code&gt;.&#10;      &lt;P&gt;&#10;      Each table description has the following columns:" />
      <item value="  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods return lists of information&#10;  in the form of &lt;code&gt;ResultSet&lt;code&gt; objects.&#10;  Regular &lt;code&gt;ResultSet&lt;code&gt; methods, such as&#10;  &lt;code&gt;getString&lt;code&gt; and &lt;code&gt;getInt&lt;code&gt;, can be used&#10;  to retrieve the data from these &lt;code&gt;ResultSet&lt;code&gt; objects.  If&#10;  a given form of metadata is not available, an empty &lt;code&gt;ResultSet&lt;code&gt;&#10;  will be returned. Additional columns beyond the columns defined to be&#10;  returned by the &lt;code&gt;ResultSet&lt;code&gt; object for a given method&#10;  can be defined by the JDBC driver vendor and must be accessed&#10;  by their &lt;B&gt;column label&lt;B&gt;.&#10;  &lt;P&gt;&#10;  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods take arguments that are&#10;  String patterns.  These arguments all have names such as fooPattern.&#10;  Within a pattern String, &quot;%&quot; means match any substring of 0 or more&#10;  characters, and &quot;_&quot; means match any one character. Only metadata&#10;  entries matching the search pattern are returned. If a search pattern&#10;  argument is set to &lt;code&gt;null&lt;code&gt;, that argument's criterion will&#10;  be dropped from the search.&#10; " />
      <item value="  A user for this interface is commonly a tool that needs to discover how to&#10;  deal with the underlying DBMS.  This is especially true for applications&#10;  that are intended to be used with more than one DBMS. For example, a tool might use the method&#10;  &lt;code&gt;getTypeInfo&lt;code&gt; to find out what data types can be used in a&#10;  &lt;code&gt;CREATE TABLE&lt;code&gt; statement.  Or a user might call the method&#10;  &lt;code&gt;supportsCorrelatedSubqueries&lt;code&gt; to see if it is possible to use&#10;  a correlated subquery or &lt;code&gt;supportsBatchUpdates&lt;code&gt; to see if it is&#10;  possible to use batch updates.&#10;  &lt;P&gt;&#10;  Some &lt;code&gt;DatabaseMetaData&lt;code&gt; methods return lists of information&#10;  in the form of &lt;code&gt;ResultSet&lt;code&gt; objects.&#10;  Regular &lt;code&gt;ResultSet&lt;code&gt; methods, such as&#10;  &lt;code&gt;getString&lt;code&gt; and &lt;code&gt;getInt&lt;code&gt;, can be used&#10;  to retrieve the data from these &lt;code&gt;ResultSet&lt;code&gt; objects.  If&#10;  a given form of metadata is not available, an empty &lt;code&gt;ResultSet&lt;code&gt;&#10;  will be returned. Additional columns beyond the columns defined to be&#10;  returned by the &lt;code&gt;ResultSet&lt;code&gt; object for a given method&#10;  can be defined by the JDBC driver vendor and must be accessed&#10;  by their &lt;B&gt;column label&lt;B&gt;." />
      <item value="  Comprehensive information about the database as a whole.&#10;  &lt;P&gt;&#10;  This interface is implemented by driver vendors to let users know the capabilities&#10;  of a Database Management System (DBMS) in combination with&#10;  the driver based on JDBC&amp;trade; technology&#10;  (&quot;JDBC driver&quot;) that is used with it.  Different relational DBMSs often support&#10;  different features, implement features in different ways, and use different&#10;  data types.  In addition, a driver may implement a feature on top of what the&#10;  DBMS offers.  Information returned by methods in this interface applies&#10;  to the capabilities of a particular driver and a particular DBMS working&#10;  together. Note that as used in this documentation, the term &quot;database&quot; is&#10;  used generically to refer to both the driver and DBMS." />
      <item value="determine Data Source" />
      <item value="Wildcard Devoted DB Meta Resolver" />
      <item value="JDBC Compatiblity" />
      <item value="Infinity" />
      <item value="exchange" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="747" />
        <entry key="ENGLISH" value="748" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1667186933269" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>