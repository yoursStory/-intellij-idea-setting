<application>
  <component name="AppStorage">
    <histories>
      <item value="The prefix of the properties that are valid to bind to this object. Synonym for prefix(). A valid prefix is defined by one or more words separated with dots (e.g. &quot;acme.system.feature&quot;).&#10;Returns:&#10;the prefix of the properties to bind" />
      <item value="validate" />
      <item value="Initialize the given BeanWrapper with the custom editors registered with this factory. To be called for BeanWrappers that will create and populate bean instances.&#10;The default implementation delegates to registerCustomEditors. Can be overridden in subclasses.&#10;Params:&#10;bw – the BeanWrapper to initialize" />
      <item value="This annotation has been deprecated as of the 3.0.1 release.&#10;  &lt;code&gt;@EnableDiscoveryClient&lt;code&gt; is no longer needed, discovery client&#10;  implementations are enabled as long as an implementation is on the classpath.&#10;  &lt;code&gt;@EnableCircuitBreaker&lt;code&gt; is no longer used now that Hystrix has been removed&#10;  from Spring Cloud." />
      <item value="iptv hash consistency VIDEO FILE" />
      <item value="deflate" />
      <item value="fetch Cover Pic" />
      <item value="fetch" />
      <item value="F Fmpeg Frame Grabber" />
      <item value="nnotation which indicates that a method parameter should be bound to a web request parameter.&#10;Supported for annotated handler methods in Spring MVC and Spring WebFlux as follows:&#10;In Spring MVC, &quot;request parameters&quot; map to query parameters, form data, and parts in multipart requests. This is because the Servlet API combines query parameters and form data into a single map called &quot;parameters&quot;, and that includes automatic parsing of the request body.&#10;In Spring WebFlux, &quot;request parameters&quot; map to query parameters only. To work with all 3, query, form data, and multipart data, you can use data binding to a command object annotated with ModelAttribute.&#10;If the method parameter type is Map and a request parameter name is specified, then the request parameter value is converted to a Map assuming an appropriate conversion strategy is available.&#10;If the method parameter is Map&lt;String, String&gt; or MultiValueMap&lt;String, String&gt; and a parameter name is not specified, then the map parameter is populated with all request parameter names" />
      <item value="Compares this date-time to another date-time.&#10;The comparison is primarily based on the date-time, from earliest to latest. It is &quot;consistent with equals&quot;, as defined by Comparable.&#10;If all the date-times being compared are instances of LocalDateTime, then the comparison will be entirely based on the date-time. If some dates being compared are in different chronologies, then the chronology is also considered, see ChronoLocalDateTime.compareTo.&#10;Params:&#10;other – the other date-time to compare to, not null&#10;Returns:&#10;the comparator value, negative if less, positive if greater" />
      <item value="content" />
      <item value="restore" />
      <item value="actions Collector" />
      <item value="Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases:&#10;If the argument value is already equal to a mathematical integer, then the result is the same as the argument.&#10;If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.&#10;If the argument value is less than zero but greater than -1.0, then the result is negative zero.&#10;Note that the value of Math.ceil(x) is exactly the value of -Math.floor(-x).&#10;Params:&#10;a – a value.&#10;Returns:&#10;the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer." />
      <item value="ceil" />
      <item value="floor" />
      <item value="Unit that represents the concept of a millisecond. For the ISO calendar system, it is equal to the 1000th part of the second u" />
      <item value="Obtains a Duration representing the duration between two temporal objects.&#10;This calculates the duration between two temporal objects. If the objects are of different types, then the duration is calculated based on the type of the first object. For example, if the first argument is a LocalTime then the second argument is converted to a LocalTime.&#10;The specified temporal objects must support the SECONDS unit. For full accuracy, either the NANOS unit or the NANO_OF_SECOND field should be supported.&#10;The result of this method can be a negative period if the end is before the start. To guarantee to obtain a positive duration call abs() on the result.&#10;Params:&#10;startInclusive – the start instant, inclusive, not null&#10;endExclusive – the end instant, exclusive, not null" />
      <item value="Temporal" />
      <item value="Msg Producer" />
      <item value="invalid Stream Id Counter" />
      <item value="image Crc Counter" />
      <item value="audio Crc Suc Counter" />
      <item value="invalid Stream Id Conuter" />
      <item value="finger Conutor" />
      <item value="finger Conuter" />
      <item value="execution" />
      <item value="sub Fix" />
      <item value="alarm Check" />
      <item value="notice Source Alarm" />
      <item value="negative" />
      <item value="Checksum State Enum" />
      <item value="  JSON Message converter - {@code Bytes} on output, String, Bytes, or byte[] on input.&#10;  Used in conjunction with Kafka&#10;  {@code BytesSerializer(BytesDeserializer, ByteArrayDeserializer, or StringDeserializer)}.&#10;  More efficient than {@link StringJsonMessageConverter} because the&#10;  {@code String&lt;-&gt;byte[]} conversion is avoided.&#10; &#10;  @author Gary Russell" />
      <item value="  JSON Message converter - {@code byte[]} on output, String, Bytes, or byte[] on input.&#10;  Used in conjunction with Kafka&#10;  {@code ByteArraySerializer(ByteArrayDeserializer, BytesDeserializer, or StringDeserializer)}.&#10;  More efficient than {@link StringJsonMessageConverter} because the&#10;  {@code String&lt;-&gt;byte[]} conversion is avoided." />
      <item value="      Overridable method that determines {@link SerializationFeature} that is used as&#10;      the global default in determining if datetime value serialized should use numeric&#10;      format (&quot;timestamp&quot;) or not.&#10;     &lt;p&gt;&#10;      Note that this feature is just the baseline setting and may be overridden on per-type&#10;      or per-property basis." />
      <item value="accpet" />
      <item value="      Constructs an empty array deque with an initial capacity&#10;      sufficient to hold the specified number of elements.&#10;     &#10;      @param numElements lower bound on initial capacity of the deque" />
      <item value="Circular Fifo Queue" />
      <item value="An optionally-bounded blocking deque based on linked nodes.&#10;The optional capacity bound constructor argument serves as a way to prevent excessive expansion. The capacity, if unspecified, is equal to Integer.MAX_VALUE. Linked nodes are dynamically created upon each insertion unless this would bring the deque above capacity.&#10;Most operations run in constant time (ignoring time spent blocking). Exceptions include remove, removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove(), and the bulk operations, all of which run in linear time.&#10;This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces.&#10;This class is a member of the Java Collections Framework." />
      <item value="finger For Save Buffer" />
      <item value="Retains only the elements in this set that are contained in the specified collection (optional operation). In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the intersection of the two sets.&#10;形参:&#10;c – collection containing elements to be retained in this set&#10;返回值:&#10;true if this set changed as a result of the call&#10;抛出:&#10;UnsupportedOperationException – if the retainAll operation is not supported by this set&#10;ClassCastException – if the class of an element of this set is incompatible with the specified collection (optional)&#10;NullPointerException – if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null&#10;请参阅:&#10;" />
      <item value="origenal" />
      <item value="handle" />
      <item value="audio" />
      <item value="Map Key Genrator" />
      <item value="Map Key Generator" />
      <item value="全局配置" />
      <item value="@SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that statements in your method body declare they generate.&#10;@SneakyThrow does not silently swallow, wrap into RuntimeException, or otherwise modify any exceptions of the listed checked exception types. The JVM does not check for the consistency of the checked exception system; javac does, and this annotation lets you opt out of its mechanism.&#10;Complete documentation is found at the project lombok features page for @SneakyThrows .&#10;Example:&#10;   @SneakyThrows(UnsupportedEncodingException.class)&#10;   public String utf8ToString(byte[] bytes) {&#10;       return new String(bytes, &quot;UTF-8&quot;);&#10;   }&#10;   &#10;Becomes:&#10;   public String utf8ToString(byte[] bytes) {&#10;       try {&#10;           return new String(bytes, &quot;UTF-8&quot;);&#10;       } catch (UnsupportedEncodingException uniqueName) {&#10;           throw useMagicTrickeryToHideThisFromTheCompiler(uniqueName);&#10;            This trickery involves a bytecode transformer run automatically during the final stages of compilation;&#10;            there is no runtime dependency on lombok.&#10;       }&#10;   " />
      <item value="Inclusion mechanism similar to PROPERTY with respect to deserialization; but one that is produced by a &quot;regular&quot; accessible property during serialization. This means that TypeSerializer will do nothing, and expects a property with defined name to be output using some other mechanism (like default POJO property serialization, or custom serializer).&#10;Note that this behavior is quite similar to that of using JsonTypeId annotation; except that here TypeSerializer is basically suppressed; whereas with JsonTypeId, output of regular property is suppressed. This mostly matters with respect to output order; this choice is the only way to ensure specific placement of type id during serialization.&#10;自:&#10;2.3.0 but databind only since 2.5.0." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="719" />
        <entry key="ENGLISH" value="720" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="5" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="7" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663414120938" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Cambria" />
    <option name="primaryFontFamily" value="DialogInput" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="512e876ddd7d2c77" />
      </youdao-translate>
    </option>
  </component>
</application>